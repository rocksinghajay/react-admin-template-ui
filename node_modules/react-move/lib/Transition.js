'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _performanceNow = require('performance-now');

var _performanceNow2 = _interopRequireDefault(_performanceNow);

var _raf = require('raf');

var _raf2 = _interopRequireDefault(_raf);

var _d3Interpolate = require('d3-interpolate');

var _d3Ease = require('d3-ease');

var Easing = _interopRequireWildcard(_d3Ease);

var _Utils = require('./Utils');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//


var msPerFrame = 1000 / 60;

var defaults = {
  data: [],
  ignore: [],
  duration: 500,
  easing: 'easeCubicOut',
  enter: function enter() {
    return null;
  },
  leave: function leave() {
    return null;
  },
  onRest: function onRest() {
    return null;
  },
  stagger: null,
  flexDuration: false,
  immutable: true,
  staggerGroups: true
};

// Used to make all the interpolators from origin to destination states
var makeInterpolators = function makeInterpolators(originState, destState, ignore) {
  // Make sure we interpolate new and old keys
  var allKeys = dedupe(Object.keys(originState), Object.keys(destState));
  var interpolators = {};
  allKeys.forEach(function (key) {
    if (ignore.indexOf(key) > -1) {
      interpolators[key] = null;
      return;
    }
    if (originState[key] === destState[key]) {
      interpolators[key] = null;
      return;
    }
    interpolators[key] = (0, _d3Interpolate.interpolate)(originState[key], destState[key]);
  });
  return interpolators;
};

var Transition = function (_Component) {
  _inherits(Transition, _Component);

  function Transition() {
    _classCallCheck(this, Transition);

    var _this = _possibleConstructorReturn(this, (Transition.__proto__ || Object.getPrototypeOf(Transition)).call(this));

    _this.items = [];
    _this.state = {
      items: []
    };
    return _this;
  }

  _createClass(Transition, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.unmounting = false;
      this.animationID = null;
      this.lastRenderTime = 0;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.pivot(this.props);
      this.ranFirst = true;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      this.pivot(props);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unmounting = true;
      if (this.animationID != null) {
        _raf2.default.cancel(this.animationID);
        this.animationID = null;
      }
    }
  }, {
    key: 'pivot',
    value: function pivot(props) {
      var _this2 = this;

      var getKey = props.getKey,
          data = props.data,
          easing = props.easing,
          duration = props.duration,
          getDuration = props.getDuration,
          getEasing = props.getEasing,
          enter = props.enter,
          update = props.update,
          leave = props.leave,
          immutable = props.immutable,
          stagger = props.stagger,
          staggerGroups = props.staggerGroups;

      // Detect if we need to animate

      var noChanges = immutable ? this.props.data === data : _Utils2.default.deepEquals(this.props.data, data);

      // If this is the first time, animate regardless
      if (this.ranFirst && noChanges) {
        return;
      }

      // Get the current items from the state (which is the visual
      // representation of our items)
      var currentItems = this.items;

      // Get the new items with their keys and data
      var newItems = data.map(function (d, i) {
        return {
          key: getKey(d, i),
          data: d,
          next: {}
        };
      });

      // Detect instant rendering
      if (!duration) {
        this.items = newItems;
        this.items.forEach(function (item) {
          item.progress = 1;
          item.originState = update(item.data, item.key);
          item.destState = _extends({}, item.originState);
        });
        this.renderProgress();
        return;
      }

      // Find items that are entering
      var enteringItems = newItems.filter(function (newItem) {
        return !currentItems.find(function (currentItem) {
          return currentItem.key === newItem.key;
        });
      });

      enteringItems.forEach(function (item, i) {
        item.willEnter = true;
      });

      // Find items that should leave
      var leavingItems = currentItems.filter(function (currentItem) {
        return !newItems.find(function (newItem) {
          return newItem.key === currentItem.key;
        });
      });

      leavingItems.forEach(function (item, i) {
        item.willLeave = true;
      });

      // Find items that are staying
      var stayingItems = currentItems.filter(function (currentItem) {
        return newItems.find(function (newItem) {
          return newItem.key === currentItem.key;
        });
      });

      stayingItems.forEach(function (item) {
        // If the item was leaving, and is now staying, update it
        if (item.leaving) {
          item.willUpdate = true;
        }
        // If the item's update function returns something new, update it
        var newDestState = update(item.data, item.key);
        if (!_Utils2.default.deepEquals(item.destState, newDestState)) {
          item.willUpdate = true;
        }
        item.willLeave = false;
        item.willEnter = false;
      });

      // Merge all of the items together and
      // give each item it's new origin/destination states
      // with corresponding interpolators
      this.items = mergeItems(currentItems, enteringItems);

      this.items.forEach(function (item, i) {
        // Queue an update either immediately or using a staggerOffset
        var staggerOffset = 0;
        // For staggering time based animations, we just need the index
        var staggerIndex = i + 1;
        // But if we are staggering by group, we will instead need the index of the
        // item relative to its predecessors who share the same entering/leaving group
        if (stagger && staggerGroups) {
          staggerIndex = 0;
          for (var ii = 0; ii < i; ii++) {
            var staggerItem = _this2.items[ii];
            if (staggerItem.willEnter === item.willEnter && staggerItem.willLeave === item.willLeave) {
              staggerIndex++;
            }
          }
        }

        if (stagger) {
          // If its staggered, we need base the progress off of
          // the staggered time, instead of the currentTime
          staggerOffset = stagger * staggerIndex;
        }

        // For every item that needs to be reset, set a new startTime
        if (item.willEnter || item.willLeave || item.willUpdate) {
          item.nextUpdate = staggerOffset ? (0, _performanceNow2.default)() + staggerOffset : true;
          item.duration = typeof getDuration === 'function' ? getDuration(item.data, item.key) : duration;
          item.easing = typeof getEasing === 'function' ? getEasing(item.data, item.key) : easing;

          // Update the easing function
          item.easer = typeof item.easing === 'function' ? item.easing : Easing[item.easing] || Easing[defaults.easing];
        }

        // Compile the possible states for each item
        item.next.update = update(item.data, item.key);
        item.next.enter = enter(item.data, item.key);
        item.next.leave = leave(item.data, item.key);

        // Since the underlying data could have changed for the currentItems
        // update them all
        var newItem = newItems.find(function (d) {
          return d.key === item.key;
        });
        item.data = newItem ? newItem.data : item.data;
      });

      // Be sure to render the origin frame
      this.renderProgress();

      // Animate if needed
      this.animate();
    }
  }, {
    key: 'animate',
    value: function animate() {
      var _this3 = this;

      // If we're unmounting, bail out.
      if (this.unmounting) {
        return;
      }

      // If we're already animated, bail out.
      if (this.animationID) {
        return;
      }

      var _props = this.props,
          flexDuration = _props.flexDuration,
          ignore = _props.ignore;


      this.animationID = (0, _raf2.default)(function () {
        // Double check that we are still mounted, since RAF can perform
        // asyncronously sometimes
        if (_this3.unmounting) {
          return;
        }

        // Keep track of time
        var currentTime = (0, _performanceNow2.default)();

        // this.items = this.items.filter(
        //   item => !(item.leaving && item.progress === 1)
        // )

        var needsAnimation = _this3.items.some(function (item) {
          return item.nextUpdate || item.progress < 1;
        });

        // If the animation is complete, tie up any loose ends...
        if (!needsAnimation) {
          _this3.animationID = null;
          _this3.wasAnimating = false;
          return;
        }

        // It's time to animate!
        _this3.wasAnimating = true;

        // If we using flexDuration, add however many milliseconds behind we are to the flexAmount to offset
        // any dropped frames
        var timeSinceLastFrame = currentTime - _this3.lastRenderTime;
        currentTime += flexDuration ? Math.max(Math.floor(timeSinceLastFrame - msPerFrame), 0) : 0;

        _this3.items.forEach(function (item, i) {
          // If the item is ready to be updated, do it now
          if (item.nextUpdate === true || item.nextUpdate && item.nextUpdate <= currentTime) {
            item.entering = false;
            item.leaving = false;
            item.updating = false;
            // Update leaving, entering, and changed items with their new origins,
            // destinations and interpolators
            if (item.willEnter) {
              item.willEnter = false;
              item.entering = true;
              item.originState = item.next.enter || item.next.update;
              item.destState = item.next.update;
              item.interpolators = makeInterpolators(item.originState, item.destState, ignore);
            } else if (item.willLeave) {
              item.willLeave = false;
              item.leaving = true;
              item.originState = item.state || item.next.update;
              item.destState = item.next.leave || item.next.update;
              item.interpolators = makeInterpolators(item.originState, item.destState, ignore);
            } else if (item.willUpdate) {
              item.willUpdate = false;
              item.updating = true;
              item.originState = item.state || item.next.update;
              item.destState = item.next.update;
              item.interpolators = makeInterpolators(item.originState, item.destState, ignore);
            }

            // For every item that needs to be reset, set a new startTime and durtaion
            item.startTime = (0, _performanceNow2.default)();
            item.nextUpdate = false;
          }

          // Set the progress
          var progress = item.startTime ? (currentTime - item.startTime) / item.duration : 0;

          // Make sure progress is between 0 and 1
          progress = Math.max(Math.min(progress, 1), 0);

          item.progress = progress;
        });

        // Render with the progress
        _this3.renderProgress();

        // Update the lastRenderTime
        _this3.lastRenderTime = currentTime;

        // Mark the frame as done
        _this3.animationID = null;

        _this3.animate();
      });
    }
  }, {
    key: 'renderProgress',
    value: function renderProgress() {
      var onRest = this.props.onRest;
      // Don't interpolate items that haven't entered yet

      var items = this.items.filter(function (item) {
        return !item.willEnter && item.originState && item.destState;
      });

      items.forEach(function (item) {
        item.state = {};
        var allKeys = dedupe(Object.keys(item.originState || {}), Object.keys(item.destState || {}));

        allKeys.forEach(function (key) {
          if (!item.progress) {
            // If at absolute 0, draw the origin state
            item.state[key] = item.originState[key];
          } else if (item.progress === 1 || !item.interpolators[key]) {
            // If ignored, skip right to the value
            item.state[key] = item.destState[key];
          } else {
            // Otherwise, interpolate with the progress
            item.state[key] = item.interpolators[key](item.easer(item.progress));
          }
        });
        if (item.progress === 1) {
          onRest(item.data, item.key);
        }
      });

      // Don't render items that haven't entered yet or have exited
      items = items.filter(function (item) {
        return !(item.willEnter || item.leaving && item.progress === 1);
      });

      // Remove items that have exited
      this.items = this.items.filter(function (item) {
        return !(item.leaving && item.progress === 1);
      });

      this.setState({ items: items });
    }
  }, {
    key: 'render',
    value: function render() {
      var renderedChildren = this.props.children(this.state.items);
      return renderedChildren && _react2.default.Children.only(renderedChildren);
    }
  }]);

  return Transition;
}(_react.Component);

// Taken from react-motion's mergeDiff (https://github.com/chenglou/react-motion/blob/446a8d0130072c4a59fec1ab788bfc2cc5c5b788/src/mergeDiff.js)


Transition.defaultProps = defaults;
exports.default = Transition;
function mergeItems(prev, next) {
  var prevKeyIndex = {};
  for (var i = 0; i < prev.length; i++) {
    prevKeyIndex[prev[i].key] = i;
  }
  var nextKeyIndex = {};
  for (var _i = 0; _i < next.length; _i++) {
    nextKeyIndex[next[_i].key] = _i;
  }
  // Merge the arrays
  var allItems = [];
  for (var _i2 = 0; _i2 < next.length; _i2++) {
    allItems[_i2] = next[_i2];
  }
  for (var _i3 = 0; _i3 < prev.length; _i3++) {
    if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[_i3].key)) {
      allItems.push(prev[_i3]);
    }
  }
  // now all the items all present. Core sorting logic to have the right order
  return allItems.sort(function (a, b) {
    var nextOrderA = nextKeyIndex[a.key];
    var nextOrderB = nextKeyIndex[b.key];
    var prevOrderA = prevKeyIndex[a.key];
    var prevOrderB = prevKeyIndex[b.key];
    if (nextOrderA != null && nextOrderB != null) {
      // both keys in next
      return nextKeyIndex[a.key] - nextKeyIndex[b.key];
    } else if (prevOrderA != null && prevOrderB != null) {
      // both keys in prev
      return prevKeyIndex[a.key] - prevKeyIndex[b.key];
    } else if (nextOrderA != null) {
      // key a in next, key b in prev
      // how to determine the order between a and b? We find a "pivot" (term
      // abuse), a key present in both prev and next, that is sandwiched between
      // a and b. In the context of our above example, if we're comparing a and
      // d, b's (the only) pivot
      for (var _i4 = 0; _i4 < next.length; _i4++) {
        var pivot = next[_i4].key;
        if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {
          continue;
        }
        if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {
          return -1;
        } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {
          return 1;
        }
      }
      // pluggable. default to: next bigger than prev
      return 1;
    }
    // prevOrderA, nextOrderB
    for (var _i5 = 0; _i5 < next.length; _i5++) {
      var _pivot = next[_i5].key;
      if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, _pivot)) {
        continue;
      }
      if (nextOrderB < nextKeyIndex[_pivot] && prevOrderA > prevKeyIndex[_pivot]) {
        return 1;
      } else if (nextOrderB > nextKeyIndex[_pivot] && prevOrderA < prevKeyIndex[_pivot]) {
        return -1;
      }
    }
    // pluggable. default to: next bigger than prev
    return -1;
  });
}

Transition.defaults = defaults;

function dedupe() {
  for (var _len = arguments.length, arrs = Array(_len), _key = 0; _key < _len; _key++) {
    arrs[_key] = arguments[_key];
  }

  var allItems = arrs.reduce(function (a, b) {
    return a.concat(b);
  }, []);
  for (var i = 0; i < allItems.length; ++i) {
    for (var j = i + 1; j < allItems.length; ++j) {
      if (allItems[i] === allItems[j]) {
        allItems.splice(j--, 1);
      }
    }
  }
  return allItems;
}
//# sourceMappingURL=data:application/json;base64,