'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _performanceNow = require('performance-now');

var _performanceNow2 = _interopRequireDefault(_performanceNow);

var _raf = require('raf');

var _raf2 = _interopRequireDefault(_raf);

var _d3Interpolate = require('d3-interpolate');

var _d3Ease = require('d3-ease');

var Easing = _interopRequireWildcard(_d3Ease);

var _Utils = require('./Utils');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//


//
var msPerFrame = 1000 / 60;

var defaults = {
  data: {},
  ignore: [],
  duration: 500,
  easing: 'easeCubicOut',
  onRest: function onRest() {
    return null;
  },
  flexDuration: false,
  immutable: true
};

var Animate = function (_Component) {
  _inherits(Animate, _Component);

  function Animate(props) {
    _classCallCheck(this, Animate);

    var _this = _possibleConstructorReturn(this, (Animate.__proto__ || Object.getPrototypeOf(Animate)).call(this));

    var defaultState = props.default,
        data = props.data;

    _this.destination = data;
    _this.state = {
      current: defaultState || data
    };
    return _this;
  }

  _createClass(Animate, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.wasAnimating = false;
      this.animationID = null;
      this.lastRenderTime = 0;
      this.interpolators = {};
      this.progress = 0;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.pivot(this.props);
      this.ranFirst = true;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      this.pivot(props);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.animationID != null) {
        _raf2.default.cancel(this.animationID);
        this.animationID = null;
      }
    }
  }, {
    key: 'pivot',
    value: function pivot(props) {
      var data = props.data,
          easing = props.easing,
          ignore = props.ignore,
          immutable = props.immutable;

      // Detect non-change render

      var needsUpdate = immutable ? this.props.data !== data : !_Utils2.default.deepEquals(this.props.data, data);

      if (this.ranFirst && !needsUpdate) {
        return;
      }

      // Update the easing function
      this.easer = typeof easing === 'function' ? easing : Easing[easing] || Easing[defaults.easing];

      // Update the origins and destinations
      this.origin = this.state.current;
      this.destination = data;

      // Update the interpolators
      for (var key in this.destination) {
        if (!Object.prototype.hasOwnProperty.call(this.destination, key)) {
          continue;
        }
        if (ignore.indexOf(key) > -1) {
          this.interpolators[key] = null;
          continue;
        }
        if (this.origin[key] === this.destination[key]) {
          this.interpolators[key] = null;
          continue;
        }
        this.interpolators[key] = (0, _d3Interpolate.interpolate)(this.origin[key], this.destination[key]);
      }

      // Reset the startTime and the progress
      this.startTime = (0, _performanceNow2.default)();
      this.progress = 0;
      if (!this.wasAnimating) {
        this.lastRenderTime = (0, _performanceNow2.default)();
      }

      // Be sure to render the origin frame
      this.renderProgress();

      // Animate if needed
      this.animate();
    }
  }, {
    key: 'animate',
    value: function animate() {
      var _this2 = this;

      if (this.animationID) {
        return;
      }

      var _props = this.props,
          onRest = _props.onRest,
          duration = _props.duration,
          flexDuration = _props.flexDuration;


      this.animationID = (0, _raf2.default)(function () {
        // If the animation is complete, tie up any loose ends...
        if (_this2.progress >= 1) {
          if (_this2.wasAnimating) {
            onRest();
          }

          // no need to cancel animationID here shouldn't have any in flight
          _this2.animationID = null;
          _this2.wasAnimating = false;
          return;
        }

        // It's time to animate!
        _this2.wasAnimating = true;

        // Keep track of time
        var currentTime = (0, _performanceNow2.default)();
        var timeSinceLastFrame = currentTime - _this2.lastRenderTime;

        // Are we using flexDuration?
        if (flexDuration) {
          // Add however many milliseconds behind we are to the startTime to offset
          // any dropped frames
          _this2.startTime += Math.max(Math.floor(timeSinceLastFrame - msPerFrame), 0);
        }

        // Update the progress
        _this2.progress = Math.max(Math.min((currentTime - _this2.startTime) / duration, 1), 0);

        // Render the progress
        _this2.renderProgress();

        // Update the lastRenderTime
        _this2.lastRenderTime = currentTime;

        // Mark the frame as done
        _this2.animationID = null;

        // Try to animate again
        _this2.animate();
      });
    }
  }, {
    key: 'renderProgress',
    value: function renderProgress() {
      var _props2 = this.props,
          data = _props2.data,
          duration = _props2.duration;


      var newCurrent = {};

      // Then use the percentage and easer to interpolate to the destination
      for (var key in data) {
        if (!Object.prototype.hasOwnProperty.call(data, key)) {
          continue;
        }

        // If ignored or no change needed, skip right to the value
        if (this.interpolators[key] === null) {
          newCurrent[key] = data[key];
        } else {
          // Otherwise, interpolate with the progress
          newCurrent[key] = duration ? this.interpolators[key](this.easer(this.progress)) : this.interpolators[key](this.progress);
        }
      }

      this.setState({
        current: newCurrent
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var renderedChildren = this.props.children(this.state.current);
      return renderedChildren && _react2.default.Children.only(renderedChildren);
    }
  }]);

  return Animate;
}(_react.Component);

Animate.defaultProps = defaults;
exports.default = Animate;


Animate.defaults = defaults;
//# sourceMappingURL=data:application/json;base64,