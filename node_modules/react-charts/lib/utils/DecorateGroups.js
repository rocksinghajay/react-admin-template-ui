'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = DecorateGroups;

var _Utils = require('./Utils');

function DecorateGroups(children, config) {
  var _groupBy = (0, _Utils.normalizePathGetter)(config[0].groupBy || function (d, i) {
    return i;
  });
  var _orderBy = (0, _Utils.normalizePathGetter)(config[0].orderBy || function (d) {
    return d.groupKey;
  });
  var orderByDir = config[0].orderByDir;
  var decorate = (0, _Utils.normalizePathGetter)(config[0].decorate);

  var nextConfigs = config.slice(1);

  var groups = void 0;

  groups = (0, _Utils.groupBy)(children, function (d, i) {
    return _groupBy(d.row, i);
  });
  groups = Object.keys(groups).map(function (groupKey) {
    return {
      groupKey: groupKey,
      children: groups[groupKey]
    };
  });

  groups = (0, _Utils.orderBy)(groups, _orderBy, orderByDir);

  if (decorate) {
    groups = groups.map(function (sGroup, i) {
      // Send the sample, index, and entire group to the decorate
      var meta = decorate(sGroup.children[0], i, sGroup);
      return {
        meta: meta,
        children: sGroup.children.map(function (children) {
          return _extends({}, children, {
            meta: _extends({}, children.meta, meta)
          });
        })
      };
    });
  }
  if (nextConfigs.length) {
    children = groups.reduce(function (prev, current) {
      return prev.concat(DecorateGroups(current.children, nextConfigs));
    }, []);
  } else {
    children = groups.reduce(function (prev, current) {
      return prev.concat(current.children);
    }, []);
  }

  return children;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9EZWNvcmF0ZUdyb3Vwcy5qcyJdLCJuYW1lcyI6WyJEZWNvcmF0ZUdyb3VwcyIsImNoaWxkcmVuIiwiY29uZmlnIiwiX2dyb3VwQnkiLCJncm91cEJ5IiwiZCIsImkiLCJfb3JkZXJCeSIsIm9yZGVyQnkiLCJncm91cEtleSIsIm9yZGVyQnlEaXIiLCJkZWNvcmF0ZSIsIm5leHRDb25maWdzIiwic2xpY2UiLCJncm91cHMiLCJyb3ciLCJPYmplY3QiLCJrZXlzIiwibWFwIiwic0dyb3VwIiwibWV0YSIsImxlbmd0aCIsInJlZHVjZSIsInByZXYiLCJjdXJyZW50IiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztrQkFFd0JBLGM7O0FBRnhCOztBQUVlLFNBQVNBLGNBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DQyxNQUFuQyxFQUEyQztBQUN4RCxNQUFNQyxXQUFXLGdDQUFvQkQsT0FBTyxDQUFQLEVBQVVFLE9BQVYsSUFBc0IsVUFBQ0MsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsV0FBVUEsQ0FBVjtBQUFBLEdBQTFDLENBQWpCO0FBQ0EsTUFBTUMsV0FBVyxnQ0FBb0JMLE9BQU8sQ0FBUCxFQUFVTSxPQUFWLElBQXNCO0FBQUEsV0FBS0gsRUFBRUksUUFBUDtBQUFBLEdBQTFDLENBQWpCO0FBQ0EsTUFBTUMsYUFBYVIsT0FBTyxDQUFQLEVBQVVRLFVBQTdCO0FBQ0EsTUFBTUMsV0FBVyxnQ0FBb0JULE9BQU8sQ0FBUCxFQUFVUyxRQUE5QixDQUFqQjs7QUFFQSxNQUFNQyxjQUFjVixPQUFPVyxLQUFQLENBQWEsQ0FBYixDQUFwQjs7QUFFQSxNQUFJQyxlQUFKOztBQUVBQSxXQUFTLG9CQUFRYixRQUFSLEVBQWtCLFVBQUNJLENBQUQsRUFBSUMsQ0FBSjtBQUFBLFdBQVVILFNBQVNFLEVBQUVVLEdBQVgsRUFBZ0JULENBQWhCLENBQVY7QUFBQSxHQUFsQixDQUFUO0FBQ0FRLFdBQVNFLE9BQU9DLElBQVAsQ0FBWUgsTUFBWixFQUFvQkksR0FBcEIsQ0FBd0I7QUFBQSxXQUFhO0FBQzVDVCx3QkFENEM7QUFFNUNSLGdCQUFVYSxPQUFPTCxRQUFQO0FBRmtDLEtBQWI7QUFBQSxHQUF4QixDQUFUOztBQUtBSyxXQUFTLG9CQUFRQSxNQUFSLEVBQWdCUCxRQUFoQixFQUEwQkcsVUFBMUIsQ0FBVDs7QUFFQSxNQUFJQyxRQUFKLEVBQWM7QUFDWkcsYUFBU0EsT0FBT0ksR0FBUCxDQUFXLFVBQUNDLE1BQUQsRUFBU2IsQ0FBVCxFQUFlO0FBQ2pDO0FBQ0EsVUFBTWMsT0FBT1QsU0FBU1EsT0FBT2xCLFFBQVAsQ0FBZ0IsQ0FBaEIsQ0FBVCxFQUE2QkssQ0FBN0IsRUFBZ0NhLE1BQWhDLENBQWI7QUFDQSxhQUFPO0FBQ0xDLGtCQURLO0FBRUxuQixrQkFBVWtCLE9BQU9sQixRQUFQLENBQWdCaUIsR0FBaEIsQ0FBb0Isb0JBQVk7QUFDeEMsOEJBQ0tqQixRQURMO0FBRUVtQiwrQkFDS25CLFNBQVNtQixJQURkLEVBRUtBLElBRkw7QUFGRjtBQU9ELFNBUlM7QUFGTCxPQUFQO0FBWUQsS0FmUSxDQUFUO0FBZ0JEO0FBQ0QsTUFBSVIsWUFBWVMsTUFBaEIsRUFBd0I7QUFDdEJwQixlQUFXYSxPQUFPUSxNQUFQLENBQWMsVUFBQ0MsSUFBRCxFQUFPQyxPQUFQO0FBQUEsYUFBbUJELEtBQUtFLE1BQUwsQ0FBWXpCLGVBQWV3QixRQUFRdkIsUUFBdkIsRUFBaUNXLFdBQWpDLENBQVosQ0FBbkI7QUFBQSxLQUFkLEVBQTZGLEVBQTdGLENBQVg7QUFDRCxHQUZELE1BRU87QUFDTFgsZUFBV2EsT0FBT1EsTUFBUCxDQUFjLFVBQUNDLElBQUQsRUFBT0MsT0FBUDtBQUFBLGFBQW1CRCxLQUFLRSxNQUFMLENBQVlELFFBQVF2QixRQUFwQixDQUFuQjtBQUFBLEtBQWQsRUFBZ0UsRUFBaEUsQ0FBWDtBQUNEOztBQUVELFNBQU9BLFFBQVA7QUFDRCIsImZpbGUiOiJEZWNvcmF0ZUdyb3Vwcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5vcm1hbGl6ZVBhdGhHZXR0ZXIsIGdyb3VwQnksIG9yZGVyQnkgfSBmcm9tICcuL1V0aWxzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEZWNvcmF0ZUdyb3VwcyAoY2hpbGRyZW4sIGNvbmZpZykge1xuICBjb25zdCBfZ3JvdXBCeSA9IG5vcm1hbGl6ZVBhdGhHZXR0ZXIoY29uZmlnWzBdLmdyb3VwQnkgfHwgKChkLCBpKSA9PiBpKSlcbiAgY29uc3QgX29yZGVyQnkgPSBub3JtYWxpemVQYXRoR2V0dGVyKGNvbmZpZ1swXS5vcmRlckJ5IHx8IChkID0+IGQuZ3JvdXBLZXkpKVxuICBjb25zdCBvcmRlckJ5RGlyID0gY29uZmlnWzBdLm9yZGVyQnlEaXJcbiAgY29uc3QgZGVjb3JhdGUgPSBub3JtYWxpemVQYXRoR2V0dGVyKGNvbmZpZ1swXS5kZWNvcmF0ZSlcblxuICBjb25zdCBuZXh0Q29uZmlncyA9IGNvbmZpZy5zbGljZSgxKVxuXG4gIGxldCBncm91cHNcblxuICBncm91cHMgPSBncm91cEJ5KGNoaWxkcmVuLCAoZCwgaSkgPT4gX2dyb3VwQnkoZC5yb3csIGkpKVxuICBncm91cHMgPSBPYmplY3Qua2V5cyhncm91cHMpLm1hcChncm91cEtleSA9PiAoe1xuICAgIGdyb3VwS2V5LFxuICAgIGNoaWxkcmVuOiBncm91cHNbZ3JvdXBLZXldXG4gIH0pKVxuXG4gIGdyb3VwcyA9IG9yZGVyQnkoZ3JvdXBzLCBfb3JkZXJCeSwgb3JkZXJCeURpcilcblxuICBpZiAoZGVjb3JhdGUpIHtcbiAgICBncm91cHMgPSBncm91cHMubWFwKChzR3JvdXAsIGkpID0+IHtcbiAgICAgIC8vIFNlbmQgdGhlIHNhbXBsZSwgaW5kZXgsIGFuZCBlbnRpcmUgZ3JvdXAgdG8gdGhlIGRlY29yYXRlXG4gICAgICBjb25zdCBtZXRhID0gZGVjb3JhdGUoc0dyb3VwLmNoaWxkcmVuWzBdLCBpLCBzR3JvdXApXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZXRhLFxuICAgICAgICBjaGlsZHJlbjogc0dyb3VwLmNoaWxkcmVuLm1hcChjaGlsZHJlbiA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmNoaWxkcmVuLFxuICAgICAgICAgICAgbWV0YToge1xuICAgICAgICAgICAgICAuLi5jaGlsZHJlbi5tZXRhLFxuICAgICAgICAgICAgICAuLi5tZXRhXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgaWYgKG5leHRDb25maWdzLmxlbmd0aCkge1xuICAgIGNoaWxkcmVuID0gZ3JvdXBzLnJlZHVjZSgocHJldiwgY3VycmVudCkgPT4gcHJldi5jb25jYXQoRGVjb3JhdGVHcm91cHMoY3VycmVudC5jaGlsZHJlbiwgbmV4dENvbmZpZ3MpKSwgW10pXG4gIH0gZWxzZSB7XG4gICAgY2hpbGRyZW4gPSBncm91cHMucmVkdWNlKChwcmV2LCBjdXJyZW50KSA9PiBwcmV2LmNvbmNhdChjdXJyZW50LmNoaWxkcmVuKSwgW10pXG4gIH1cblxuICByZXR1cm4gY2hpbGRyZW5cbn1cbiJdfQ==