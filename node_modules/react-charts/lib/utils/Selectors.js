'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Utils = require('./Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _Memoize = require('./Memoize');

var _Memoize2 = _interopRequireDefault(_Memoize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  primaryAxis: function primaryAxis() {
    return (0, _Memoize2.default)(function (state) {
      return [state.axes];
    }, function (axes) {
      for (var key in axes) {
        if (axes.hasOwnProperty(key)) {
          if (axes[key].primary) {
            return axes[key];
          }
        }
      }
      return undefined;
    });
  },

  secondaryAxis: function secondaryAxis() {
    return (0, _Memoize2.default)(function (state) {
      return [state.axes];
    }, function (axes) {
      for (var key in axes) {
        if (axes.hasOwnProperty(key)) {
          if (!axes[key].primary) {
            return axes[key];
          }
        }
      }
      return undefined;
    });
  },

  offset: function offset() {
    return (0, _Memoize2.default)(function (state) {
      return [state && state.offset && state.offset.left || 0, state && state.offset && state.offset.top || 0];
    }, function (left, top) {
      return {
        left: left,
        top: top
      };
    });
  },

  gridX: function gridX() {
    return (0, _Memoize2.default)(function (state) {
      return [state && state.padding && state.padding.left || 0, state && state.axisDimensions && state.axisDimensions.left && state.axisDimensions.left.width || 0, state && state.axisDimensions && state.axisDimensions.top && state.axisDimensions.top.left || 0, state && state.axisDimensions && state.axisDimensions.bottom && state.axisDimensions.bottom.left || 0];
    }, function (paddingLeft, axesLeftWidth, axesTopLeft, axesBottomLeft) {
      return paddingLeft + Math.max(axesLeftWidth, axesTopLeft, axesBottomLeft);
    });
  },

  gridY: function gridY() {
    return (0, _Memoize2.default)(function (state) {
      return [state && state.padding && state.padding.top || 0, state && state.axisDimensions && state.axisDimensions.top && state.axisDimensions.top.height || 0, state && state.axisDimensions && state.axisDimensions.left && state.axisDimensions.left.top || 0, state && state.axisDimensions && state.axisDimensions.right && state.axisDimensions.right.top || 0];
    }, function (paddingTop, axesTopHeight, axesLeftTop, axesRightTop) {
      return paddingTop + Math.max(axesTopHeight, axesLeftTop, axesRightTop);
    });
  },

  gridWidth: function gridWidth() {
    return (0, _Memoize2.default)(function (state) {
      return [state && state.width && state.width || 0, state && state.padding && state.padding.left || 0, state && state.padding && state.padding.right || 0, state && state.axisDimensions && state.axisDimensions.left && state.axisDimensions.left.width || 0, state && state.axisDimensions && state.axisDimensions.right && state.axisDimensions.right.width || 0, state && state.axisDimensions && state.axisDimensions.top && state.axisDimensions.top.left || 0, state && state.axisDimensions && state.axisDimensions.top && state.axisDimensions.top.right || 0, state && state.axisDimensions && state.axisDimensions.bottom && state.axisDimensions.bottom.left || 0, state && state.axisDimensions && state.axisDimensions.bottom && state.axisDimensions.bottom.right || 0];
    }, function (width, paddingLeft, paddingRight, axesLeftWidth, axesRightWidth, axesTopLeft, axesTopRight, axesBottomLeft, axesBottomRight) {
      return width - paddingLeft - paddingRight - Math.max(axesLeftWidth, axesTopLeft, axesBottomLeft) - Math.max(axesRightWidth, axesTopRight, axesBottomRight);
    });
  },

  gridHeight: function gridHeight() {
    return (0, _Memoize2.default)(function (state) {
      return [state && state.height || 0, state && state.padding && state.padding.top || 0, state && state.padding && state.padding.bottom || 0, state && state.axisDimensions && state.axisDimensions.top && state.axisDimensions.top.height || 0, state && state.axisDimensions && state.axisDimensions.bottom && state.axisDimensions.bottom.height || 0, state && state.axisDimensions && state.axisDimensions.left && state.axisDimensions.left.top || 0, state && state.axisDimensions && state.axisDimensions.left && state.axisDimensions.left.bottom || 0, state && state.axisDimensions && state.axisDimensions.right && state.axisDimensions.right.top || 0, state && state.axisDimensions && state.axisDimensions.right && state.axisDimensions.right.bottom || 0];
    }, function (height, paddingTop, paddingBottom, axesTopHeight, axesBottomHeight, axesLeftTop, axesLeftBottom, axesRightTop, axesRightBottom) {
      return height - paddingTop - paddingBottom - Math.max(axesTopHeight, axesLeftTop, axesRightTop) - Math.max(axesBottomHeight, axesLeftBottom, axesRightBottom);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,