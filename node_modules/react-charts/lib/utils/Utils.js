'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactMove = require('react-move');

var _raf = require('raf');

var _raf2 = _interopRequireDefault(_raf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_reactMove.Animate.defaults.immutable = false;

exports.default = {
  requestAnimationFrame: _raf2.default,
  throttle: throttle,
  seriesStatus: seriesStatus,
  datumStatus: datumStatus,
  getStatusStyles: getStatusStyles,
  getStatusStyle: getStatusStyle,
  getCenterPointOfSide: getCenterPointOfSide,
  getClosestPoint: getClosestPoint,
  normalizeComponent: normalizeComponent,
  materializeStyles: materializeStyles,
  normalizeGetter: normalizeGetter,
  normalizePathGetter: normalizePathGetter,
  get: get,
  mapValues: mapValues,
  uniq: uniq,
  groupBy: groupBy,
  orderBy: orderBy,
  isArray: isArray
};


function throttle(func) {
  var running = void 0;
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (running) return;
    running = (0, _raf2.default)(function () {
      func.apply(undefined, args);
      running = false;
    });
  };
}

function seriesStatus(series, hovered, selected) {
  var status = {
    selected: false,
    hovered: false,
    otherSelected: false,
    otherHovered: false
  };
  if (selected && selected.active && selected.series) {
    status.selected = selected.series.id === series.id;
    status.otherSelected = !status.selected;
  }
  if (hovered && hovered.active && hovered.series) {
    status.hovered = hovered.series.id === series.id;
    status.otherHovered = !status.hovered;
  }

  return status;
}

function datumStatus(series, datum, hovered, selected) {
  var status = {
    selected: false,
    hovered: false,
    otherSelected: false,
    otherHovered: false
  };

  var d = void 0;
  if (selected && selected.active && selected.datums) {
    for (var i = 0; i < selected.datums.length; i++) {
      d = selected.datums[i];
      if (d.seriesID === series.id && d.index === datum.index) {
        status.selected = true;
        break;
      }
    }
    status.otherSelected = !status.selected;
  }
  if (hovered && hovered.active && hovered.datums) {
    for (var _i = 0; _i < hovered.datums.length; _i++) {
      d = hovered.datums[_i];
      if (d.seriesID === series.id && d.index === datum.index) {
        status.hovered = true;
        break;
      }
    }
    status.otherHovered = !status.hovered;
  }

  return status;
}

function getStatusStyles(item, decorator, defaults) {
  var styles = {
    default: decorator(item),
    selected: decorator(_extends({}, item, {
      selected: true
    })),
    selectedHovered: decorator(_extends({}, item, {
      selected: true,
      hovered: true
    })),
    selectedOtherHovered: decorator(_extends({}, item, {
      selected: true,
      otherHovered: true
    })),
    otherSelected: decorator(_extends({}, item, {
      otherSelected: true
    })),
    otherSelectedHovered: decorator(_extends({}, item, {
      otherSelected: true,
      hovered: true
    })),
    otherSelectedOtherHovered: decorator(_extends({}, item, {
      otherHovered: true,
      otherSelected: true
    })),
    hovered: decorator(_extends({}, item, {
      hovered: true
    })),
    otherHovered: decorator(_extends({}, item, {
      otherHovered: true
    }))
  };
  Object.keys(styles).forEach(function (key) {
    styles[key] = materializeStyles(styles[key], defaults);
  });
  return styles;
}

function getStatusStyle(status, styles) {
  if (status.selected) {
    if (status.hovered) {
      return styles.selectedHovered;
    }
    return styles.selected;
  }
  if (status.hovered) {
    return styles.hovered;
  }
  return styles.default;
}

function getCenterPointOfSide(position, points) {
  var xMin = void 0,
      xMax = void 0,
      yMin = void 0,
      yMax = void 0;

  xMin = points[0].focus.x;
  xMax = points[0].focus.x;
  yMin = points[0].focus.y;
  yMax = points[0].focus.y;

  points.forEach(function (point) {
    xMin = Math.min(point.focus.x, xMin);
    xMax = Math.max(point.focus.x, xMax);
    yMin = Math.min(point.focus.y, yMin);
    yMax = Math.max(point.focus.y, yMax);
  });

  if (position === 'left') {
    return {
      x: xMin,
      y: (yMin + yMax) / 2
    };
  }
  if (position === 'right') {
    return {
      x: xMax,
      y: (yMin + yMax) / 2
    };
  }
  if (position === 'top') {
    return {
      x: (xMin + xMax) / 2,
      y: yMin
    };
  }
  if (position === 'bottom') {
    return {
      x: (xMin + xMax) / 2,
      y: yMax
    };
  }
  // Center
  return {
    x: (xMin + xMax) / 2,
    y: (yMin + yMax) / 2
  };
}

function getClosestPoint(position, points) {
  var closestDistance = Infinity;
  var closestPoint = points[0] || {};
  points.forEach(function (p) {
    var distance = Math.sqrt(Math.pow(p.focus.x - position.x, 2) + Math.pow(p.focus.y - position.y, 2));
    if (distance < closestDistance) {
      closestDistance = distance;
      closestPoint = p;
    }
  });
  return closestPoint;
}

function normalizeComponent(Comp) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Comp;

  return typeof Comp === 'function' ? Object.getPrototypeOf(Comp).isReactComponent ? _react2.default.createElement(Comp, params) : Comp(params) : fallback;
}

function materializeStyles() {
  var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  style = _extends({}, style, {
    stroke: style.stroke || style.color || defaults.stroke || defaults.color,
    fill: style.fill || style.color || defaults.fill || defaults.color
  });['area', 'line', 'rectangle', 'circle'].forEach(function (type) {
    style[type] = style[type] ? materializeStyles(style[type], defaults) : {};
  });
  return style;
}

function normalizeGetter(getter) {
  if (!getter) {
    return;
  }
  if (typeof getter === 'function') {
    return getter;
  }
  return function () {
    return getter;
  };
}

function normalizePathGetter(getter) {
  if (typeof getter === 'function') {
    return getter;
  }
  return function (d, i) {
    return get(d, getter);
  };
}

function get(obj, path, def) {
  if (typeof obj === 'function') {
    try {
      return obj();
    } catch (e) {
      return path;
    }
  }
  if (!path) {
    return obj;
  }
  var pathObj = makePathArray(path);
  var val = void 0;
  try {
    val = pathObj.reduce(function (current, pathPart) {
      return current[pathPart];
    }, obj);
  } catch (e) {}
  return typeof val !== 'undefined' ? val : def;
}

function mapValues(obj, cb) {
  var newObj = {};
  for (var prop in obj) {
    if (obj.hasOwnProperty(prop)) {
      newObj[prop] = cb(obj[prop], prop, obj);
    }
  }
  return newObj;
}

function uniq(arr) {
  return arr.filter(function (d, i) {
    return arr.filter(function (dd) {
      return dd === d;
    }).length === 1;
  });
}

function groupBy(xs, key) {
  return xs.reduce(function (rv, x, i) {
    var resKey = typeof key === 'function' ? key(x, i) : x[key];
    rv[resKey] = isArray(rv[resKey]) ? rv[resKey] : [];
    rv[resKey].push(x);
    return rv;
  }, {});
}

function orderBy(arr, funcs) {
  var dirs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  funcs = isArray(funcs) ? funcs : [funcs];
  return arr.sort(function (a, b) {
    for (var i = 0; i < funcs.length; i++) {
      var comp = funcs[i];
      var ca = comp(a);
      var cb = comp(b);
      var desc = dirs[i] === false || dirs[i] === 'desc';
      if (ca > cb) {
        return desc ? -1 : 1;
      }
      if (ca < cb) {
        return desc ? 1 : -1;
      }
    }
    return dirs[0] ? a.__index - b.__index : b.__index - b.__index;
  });
}

function isArray(a) {
  return Array.isArray(a);
}

// ########################################################################
// Non-exported Helpers
// ########################################################################

function makePathArray(obj) {
  return flattenDeep(obj).join('.').replace('[', '.').replace(']', '').split('.');
}

function flattenDeep(arr) {
  var newArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (!isArray(arr)) {
    newArr.push(arr);
  } else {
    for (var i = 0; i < arr.length; i++) {
      flattenDeep(arr[i], newArr);
    }
  }
  return newArr;
}
//# sourceMappingURL=data:application/json;base64,