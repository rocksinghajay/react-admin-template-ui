'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactState = require('react-state');

var _reactMove = require('react-move');

var _Utils = require('../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _Selectors = require('../utils/Selectors');

var _Selectors2 = _interopRequireDefault(_Selectors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//


//

var fontSize = 12;

var Tooltip = function (_PureComponent) {
  _inherits(Tooltip, _PureComponent);

  function Tooltip() {
    _classCallCheck(this, Tooltip);

    return _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).apply(this, arguments));
  }

  _createClass(Tooltip, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          hovered = _props.hovered,
          primaryAxis = _props.primaryAxis,
          secondaryAxis = _props.secondaryAxis,
          _props$offset = _props.offset,
          left = _props$offset.left,
          top = _props$offset.top,
          gridX = _props.gridX,
          gridY = _props.gridY,
          cursor = _props.cursor,
          position = _props.position,
          align = _props.align,
          children = _props.children;


      if (!primaryAxis || !secondaryAxis || !hovered || !cursor) {
        return null;
      }

      var datums = hovered.datums && hovered.datums.length ? hovered.datums : hovered.series ? hovered.series.data : null;

      // TODO: tooltip origin: hovered or chart or custom. Allows the user to position the tooltip relative to different parts of the chart
      // TODO: tooltip hardcoded offset and/or dynamic offset based on target element

      var focus = datums ? typeof position === 'function' ? position(datums, cursor) : position === 'left' ? _Utils2.default.getCenterPointOfSide('left', datums) : position === 'right' ? _Utils2.default.getCenterPointOfSide('right', datums) : position === 'top' ? _Utils2.default.getCenterPointOfSide('top', datums) : position === 'bottom' ? _Utils2.default.getCenterPointOfSide('bottom', datums) : position === 'center' ? _Utils2.default.getCenterPointOfSide('center', datums) : position === 'cursor' ? cursor : _Utils2.default.getClosestPoint(cursor, datums).focus // : quadTree.find(cursor.x, cursor.y)
      : {
        x: gridX,
        y: gridY
      };

      var x = gridX + focus.x;
      var y = gridY + focus.y;

      var alignX = void 0;
      var alignY = void 0;

      var triangleStyles = {};

      if (align === 'top') {
        alignX = '-50%';
        alignY = '-100%';
        triangleStyles = {
          top: '100%',
          left: '50%',
          transform: 'translate(-50%, 0%)',
          borderLeft: '5px solid transparent',
          borderRight: '5px solid transparent',
          borderTop: '5px solid rgba(38, 38, 38, 0.8)'
        };
      } else if (align === 'bottom') {
        alignX = '-50%';
        alignY = '0%';
        triangleStyles = {
          top: '0%',
          left: '50%',
          transform: 'translate(-50%, -100%)',
          borderLeft: '5px solid transparent',
          borderRight: '5px solid transparent',
          borderBottom: '5px solid rgba(38, 38, 38, 0.8)'
        };
      } else if (align === 'left') {
        alignX = '-100%';
        alignY = '-50%';
        triangleStyles = {
          top: '50%',
          left: '100%',
          transform: 'translate(0%, -50%)',
          borderTop: '5px solid transparent',
          borderBottom: '5px solid transparent',
          borderLeft: '5px solid rgba(38, 38, 38, 0.8)'
        };
      } else if (align === 'right') {
        alignX = '0%';
        alignY = '-50%';
        triangleStyles = {
          top: '50%',
          left: '0%',
          transform: 'translate(-100%, -50%)',
          borderTop: '5px solid transparent',
          borderBottom: '5px solid transparent',
          borderRight: '5px solid rgba(38, 38, 38, 0.8)'
        };
      } else if (align === 'center') {
        // TODO: Automatic Mode
        alignX = '-50%';
        alignY = '-50%';
        triangleStyles = {
          opacity: 0
        };
      }

      var visibility = hovered.active ? 1 : 0;

      return _react2.default.createElement(
        _reactMove.Animate,
        {
          data: {
            x: x,
            y: y,
            alignX: alignX,
            alignY: alignY,
            triangleStyles: triangleStyles,
            visibility: visibility
          },
          duration: 400
        },
        function (_ref) {
          var x = _ref.x,
              y = _ref.y,
              alignX = _ref.alignX,
              alignY = _ref.alignY,
              triangleStyles = _ref.triangleStyles,
              visibility = _ref.visibility;
          return _react2.default.createElement(
            'div',
            {
              className: 'tooltip-wrap',
              style: {
                pointerEvents: 'none',
                position: 'absolute',
                left: left + 'px',
                top: top + 'px',
                opacity: visibility
              }
            },
            _react2.default.createElement(
              'div',
              {
                style: {
                  transform: 'translate3d(' + x + 'px, ' + y + 'px, 0px)'
                }
              },
              _react2.default.createElement(
                'div',
                {
                  style: {
                    transform: 'translate3d(' + alignX + ', ' + alignY + ', 0)',
                    padding: '7px'
                  }
                },
                _react2.default.createElement(
                  'div',
                  {
                    style: {
                      fontSize: fontSize + 'px',
                      padding: '5px',
                      background: 'rgba(38, 38, 38, 0.8)',
                      color: 'white',
                      borderRadius: '3px',
                      position: 'relative'
                    }
                  },
                  children(_extends({}, hovered, {
                    primaryAxis: primaryAxis,
                    secondaryAxis: secondaryAxis
                  })),
                  _react2.default.createElement('div', {
                    style: _extends({
                      position: 'absolute',
                      width: '0',
                      height: '0'
                    }, triangleStyles)
                  })
                )
              )
            )
          );
        }
      );
    }
  }]);

  return Tooltip;
}(_react.PureComponent);

Tooltip.defaultProps = {
  position: 'average',
  align: 'top',
  children: function children(props) {
    var series = props.series,
        datums = props.datums,
        primaryAxis = props.primaryAxis,
        secondaryAxis = props.secondaryAxis;

    return series ? _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        'strong',
        null,
        series.label
      ),
      _react2.default.createElement('br', null)
    ) : datums && datums.length ? _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        'div',
        {
          style: {
            marginBottom: '3px'
          }
        },
        _react2.default.createElement(
          'strong',
          null,
          primaryAxis.format(datums[0].primary)
        )
      ),
      _react2.default.createElement(
        'table',
        null,
        _react2.default.createElement(
          'tbody',
          null,
          (secondaryAxis.stacked ? [].concat(_toConsumableArray(datums)).reverse() : datums).map(function (d, i) {
            return _react2.default.createElement(
              'tr',
              { key: i },
              _react2.default.createElement(
                'td',
                null,
                _react2.default.createElement(
                  'span',
                  { style: { color: d.statusStyles.hovered.fill } },
                  '\u25CF'
                ),
                ' ',
                d.seriesLabel,
                ': \xA0'
              ),
              _react2.default.createElement(
                'td',
                {
                  style: {
                    textAlign: 'right'
                  }
                },
                Math.floor(d.secondary) < d.secondary ? secondaryAxis.format(Math.round(d.secondary * 100) / 100) : secondaryAxis.format(d.secondary)
              )
            );
          })
        )
      )
    ) : null;
  }
};
exports.default = (0, _reactState.Connect)(function () {
  var selectors = {
    primaryAxis: _Selectors2.default.primaryAxis(),
    secondaryAxis: _Selectors2.default.secondaryAxis(),
    gridX: _Selectors2.default.gridX(),
    gridY: _Selectors2.default.gridY(),
    offset: _Selectors2.default.offset()
  };
  return function (state) {
    return {
      primaryAxis: selectors.primaryAxis(state),
      secondaryAxis: selectors.secondaryAxis(state),
      gridX: selectors.gridX(state),
      gridY: selectors.gridY(state),
      hovered: state.hovered,
      cursor: state.cursor,
      offset: selectors.offset(state),
      quadTree: state.quadTree
    };
  };
}, {
  statics: {
    isHTML: true
  }
})(Tooltip);
//# sourceMappingURL=data:application/json;base64,