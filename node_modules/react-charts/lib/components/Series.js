'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactState = require('react-state');

var _d3Quadtree = require('d3-quadtree');

var _Selectors = require('../utils/Selectors');

var _Selectors2 = _interopRequireDefault(_Selectors);

var _Utils = require('../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _reactMove = require('react-move');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//


var defaultColors = ['#4ab5eb', '#fc6868', '#DECF3F', '#60BD68', '#FAA43A', '#c63b89', '#1aaabe', '#734fe9', '#1828bd', '#cd82ad'];

var getType = function getType(type, data, i) {
  // Allow dynamic types
  var typeGetter = typeof type === 'function' && type.prototype.isReactComponent ? function () {
    return type;
  } : type;
  return typeGetter(data, i);
};

var Series = function (_PureComponent) {
  _inherits(Series, _PureComponent);

  function Series() {
    _classCallCheck(this, Series);

    return _possibleConstructorReturn(this, (Series.__proto__ || Object.getPrototypeOf(Series)).apply(this, arguments));
  }

  _createClass(Series, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateStackData(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      var oldProps = this.props;

      // If any of the following change,
      // we need to update the stack
      if (newProps.materializedData !== oldProps.materializedData || newProps.axes !== oldProps.axes || newProps.type !== oldProps.type || newProps.seriesKey !== oldProps.seriesKey || newProps.primaryAxis !== oldProps.primaryAxis || newProps.secondaryAxis !== oldProps.secondaryAxis) {
        this.updateStackData(newProps);
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      if (nextProps.stackData !== this.props.stackData) {
        this.stackData = [].concat(_toConsumableArray(nextProps.stackData)).reverse(); // For proper svg stacking
        return true;
      }
      return false;
    }
  }, {
    key: 'updateStackData',
    value: function updateStackData(props) {
      var type = props.type,
          getStyles = props.getStyles,
          getDataStyles = props.getDataStyles,
          materializedData = props.materializedData,
          primaryAxis = props.primaryAxis,
          secondaryAxis = props.secondaryAxis;

      // We need materializedData to proceed

      if (!materializedData) {
        return;
      }

      // If the axes are not ready, just provide the materializedData
      if (!primaryAxis || !secondaryAxis) {
        return;
      }

      // If the axes are ready, let's decorate the materializedData for visual plotting
      var secondaryStacked = secondaryAxis.stacked;

      // Make sure we're mapping x and y to the correct axes
      var xKey = primaryAxis.vertical ? 'secondary' : 'primary';
      var yKey = primaryAxis.vertical ? 'primary' : 'secondary';
      var xAxis = primaryAxis.vertical ? secondaryAxis : primaryAxis;
      var yAxis = primaryAxis.vertical ? primaryAxis : secondaryAxis;
      var xScale = xAxis.scale;
      var yScale = yAxis.scale;

      // "totals" are kept and used for bases if secondaryAxis stacking is enabled
      var totals = {};
      if (secondaryStacked) {
        materializedData.forEach(function (series) {
          series.data.forEach(function (datum) {
            totals[datum.primary] = {
              negative: 0,
              positive: 0
            };
          });
        });
      }

      var stackData = materializedData.map(function (series, seriesIndex) {
        var SeriesComponent = getType(type, series, seriesIndex) || {};
        return _extends({}, series, {
          type: SeriesComponent.SeriesType,
          data: series.data.map(function (d, index) {
            var datum = _extends({}, d, {
              x: d[xKey],
              y: d[yKey],
              base: 0
            });
            if (secondaryStacked) {
              var start = totals[d.primary];
              // Stack the x or y values (according to axis positioning)
              if (primaryAxis.vertical) {
                // Should we use positive or negative base?
                var key = datum.x >= 0 ? 'positive' : 'negative';
                // Assign the base
                datum.base = start[key];
                // Add the value to the base
                datum.x = datum.base + datum.x;
                // Update the totals
                totals[d.primary][key] = datum.x;
              } else {
                // Should we use positive or negative base?
                var _key = datum.y >= 0 ? 'positive' : 'negative';
                // Assign the base
                datum.base = start[_key];
                // Add the value to the base
                datum.y = datum.base + datum.y;
                // Update the totals
                totals[d.primary][_key] = datum.y;
              }
            }
            return datum;
          })
        });
      });

      // Now, scale the datapoints to their axis coordinates
      // (mutation is okay here, since we have already made a materialized copy)
      stackData.forEach(function (series) {
        series.data.forEach(function (d, index) {
          // Data for cartesian charts
          if (series.type === 'Line' || series.type === 'Area' || series.type === 'Bar') {
            d.x = xScale(d.x);
            d.y = yScale(d.y);
            d.base = primaryAxis.vertical ? xScale(d.base) : yScale(d.base);
            // Adjust non-bar elements for ordinal scales
            if (series.type !== 'Bar') {
              if (xAxis.type === 'ordinal') {
                d.x += xAxis.tickOffset;
              }
              if (yAxis.type === 'ordinal') {
                d.y += yAxis.tickOffset;
              }
            }

            // Set the default focus point
            d.focus = {
              x: d.x,
              y: d.y
            };

            // Adjust the focus point for specific elements
            if (series.type === 'Bar') {
              if (!xAxis.vertical) {
                d.focus.x = d.x + xAxis.tickOffset;
              }
              if (!yAxis.vertical) {
                d.focus.y = d.y + yAxis.tickOffset;
              }
            }
          } else if (series.type === 'Pie') {
            // data for Radial charts
            d.focus = primaryAxis.scale(d);
            d.x = d.focus.x;
            d.y = d.focus.y;
          }
        });
      });

      // Not we need to precalculate all of the possible status styles by
      // calling the seemingly 'live' getStyles, and getDataStyles callbacks ;)
      stackData.forEach(function (series) {
        var defaults = series.type !== 'Pie' ? {
          // Pass some sane defaults
          color: defaultColors[series.index % (defaultColors.length - 1)]
        } : {};

        series.statusStyles = _Utils2.default.getStatusStyles(series, getStyles, defaults);

        // We also need to decorate each datum in the same fashion
        series.data.forEach(function (datum) {
          if (series.type === 'Pie') {
            defaults.color = defaultColors[datum.index % (defaultColors.length - 1)];
          }
          datum.statusStyles = _Utils2.default.getStatusStyles(datum, getDataStyles, _extends({}, defaults, series.statusStyles.default));
        });
      });

      var allPoints = [];

      stackData.forEach(function (s) {
        s.data.forEach(function (d) {
          allPoints.push(d);
        });
      });

      var quadTree = (0, _d3Quadtree.quadtree)().x(function (d) {
        return d.x;
      }).y(function (d) {
        return d.y;
      }).addAll(allPoints);

      this.props.dispatch(function (state) {
        return _extends({}, state, {
          stackData: stackData,
          quadTree: quadTree
        });
      }, {
        type: 'stackData'
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          type = _props.type,
          getStyles = _props.getStyles,
          getDataStyles = _props.getDataStyles,
          rest = _objectWithoutProperties(_props, ['type', 'getStyles', 'getDataStyles']);

      var stackData = this.stackData;


      if (!stackData) {
        return null;
      }

      return _react2.default.createElement(
        _reactMove.Transition,
        {
          data: stackData // The stack is reversed for proper z-index painting
          , getKey: function getKey(d, i) {
            return d.id;
          },
          update: function update(d) {
            return {
              visibility: 1
            };
          },
          enter: function enter(d, i) {
            return {
              visibility: 0
            };
          },
          leave: function leave(d) {
            return {
              visibility: 0
            };
          },
          ignore: ['visibility'],
          duration: 500
        },
        function (inters) {
          return _react2.default.createElement(
            'g',
            { className: 'Series' },
            inters.map(function (inter, i) {
              var StackCmp = getType(type, inter.data, inter.data.id);
              return _react2.default.createElement(StackCmp, _extends({}, rest, {
                key: inter.key,
                series: inter.data,
                stackData: stackData,
                visibility: inter.state.visibility
              }));
            })
          );
        }
      );
    }
  }]);

  return Series;
}(_react.PureComponent);

Series.defaultProps = {
  getStyles: function getStyles(d) {
    return {};
  },
  getDataStyles: function getDataStyles(d) {
    return {};
  }
};
exports.default = (0, _reactState.Connect)(function () {
  var selectors = {
    primaryAxis: _Selectors2.default.primaryAxis(),
    secondaryAxis: _Selectors2.default.secondaryAxis()
  };
  return function (state, props) {
    return {
      materializedData: state.materializedData,
      stackData: state.stackData,
      primaryAxis: selectors.primaryAxis(state),
      secondaryAxis: selectors.secondaryAxis(state),
      hovered: state.hovered,
      selected: state.selected
    };
  };
}, {
  filter: function filter(oldState, newState, meta) {
    return meta.type !== 'cursor';
  }
})(Series);
//# sourceMappingURL=data:application/json;base64,