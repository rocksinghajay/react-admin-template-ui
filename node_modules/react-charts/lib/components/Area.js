'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactMove = require('react-move');

var _reactState = require('react-state');

var _d3Shape = require('d3-shape');

var _Utils = require('../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _Curves = require('../utils/Curves');

var _Curves2 = _interopRequireDefault(_Curves);

var _interactionMethods = require('../utils/interactionMethods');

var _Path = require('../primitives/Path');

var _Path2 = _interopRequireDefault(_Path);

var _Circle = require('../primitives/Circle');

var _Circle2 = _interopRequireDefault(_Circle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//


var pathDefaultStyle = {
  strokeWidth: 2
};

var circleDefaultStyle = {
  r: 2
};

var Area = function (_PureComponent) {
  _inherits(Area, _PureComponent);

  function Area() {
    _classCallCheck(this, Area);

    var _this = _possibleConstructorReturn(this, (Area.__proto__ || Object.getPrototypeOf(Area)).call(this));

    _this.selectSeries = _interactionMethods.selectSeries.bind(_this);
    _this.hoverSeries = _interactionMethods.hoverSeries.bind(_this);
    _this.selectDatum = _interactionMethods.selectDatum.bind(_this);
    _this.hoverDatum = _interactionMethods.hoverDatum.bind(_this);
    return _this;
  }

  _createClass(Area, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          series = _props.series,
          visibility = _props.visibility,
          showPoints = _props.showPoints,
          curve = _props.curve,
          selected = _props.selected,
          hovered = _props.hovered,
          interaction = _props.interaction;


      var status = _Utils2.default.seriesStatus(series, hovered, selected);
      var style = _Utils2.default.getStatusStyle(status, series.statusStyles);

      var areaFn = (0, _d3Shape.area)().defined(function (d) {
        return typeof d[0] === 'number' && typeof d[1] === 'number';
      }).curve(_Curves2.default[curve] || curve).y0(function (d) {
        return d[2];
      });

      var lineFn = (0, _d3Shape.line)().defined(function (d) {
        return typeof d[0] === 'number' && typeof d[1] === 'number';
      }).curve(_Curves2.default[curve] || curve);

      var data = series.data.map(function (d) {
        return {
          x: d.x,
          y: d.y,
          r: d.r,
          base: d.base
        };
      });

      return _react2.default.createElement(
        _reactMove.Animate,
        {
          'default': {
            data: data,
            visibility: 0
          },
          data: {
            data: data,
            visibility: visibility
          }
        },
        function (inter) {
          var areaPath = areaFn(inter.data.map(function (d) {
            return [isNaN(d.x) ? null : d.x, isNaN(d.y) ? null : d.y, isNaN(d.base) ? null : d.base];
          }));
          var linePath = lineFn(inter.data.map(function (d) {
            return [isNaN(d.x) ? null : d.x, isNaN(d.y) ? null : d.y];
          }));

          var seriesInteractionProps = interaction === 'series' ? {
            onClick: function onClick() {
              return _this2.selectSeries(series);
            },
            onMouseEnter: function onMouseEnter() {
              return _this2.hoverSeries(series);
            },
            onMouseMove: function onMouseMove() {
              return _this2.hoverSeries(series);
            },
            onMouseLeave: function onMouseLeave() {
              return _this2.hoverSeries(null);
            }
          } : {};

          return _react2.default.createElement(
            'g',
            null,
            _react2.default.createElement(_Path2.default, _extends({
              d: areaPath,
              style: _extends({}, pathDefaultStyle, style, style.area, {
                stroke: 'transparent'
              }),
              opacity: inter.visibility
            }, seriesInteractionProps)),
            _react2.default.createElement(_Path2.default, _extends({
              d: linePath,
              style: _extends({}, pathDefaultStyle, style, style.line, {
                fill: 'none'
              }),
              opacity: inter.visibility
            }, seriesInteractionProps)),
            showPoints && series.data.map(function (datum, i) {
              var status = _Utils2.default.datumStatus(series, datum, hovered, selected);
              var dataStyle = _Utils2.default.getStatusStyle(status, datum.statusStyles);

              var datumInteractionProps = interaction === 'element' ? {
                onClick: function onClick() {
                  return _this2.selectDatum(datum);
                },
                onMouseEnter: function onMouseEnter() {
                  return _this2.hoverDatum(datum);
                },
                onMouseMove: function onMouseMove() {
                  return _this2.hoverDatum(datum);
                },
                onMouseLeave: function onMouseLeave() {
                  return _this2.hoverDatum(null);
                }
              } : {};

              return _react2.default.createElement(_Circle2.default, _extends({
                key: i,
                x: inter.data[i].x,
                y: inter.data[i].y,
                style: _extends({}, circleDefaultStyle, style, style.circle, dataStyle, dataStyle.circle),
                opacity: inter.visibility
              }, seriesInteractionProps, datumInteractionProps));
            })
          );
        }
      );
    }
  }]);

  return Area;
}(_react.PureComponent);

Area.defaultProps = {
  showPoints: false,
  curve: 'monotoneX'
};
exports.default = (0, _reactState.Connect)(function (state, props) {
  return {
    hovered: state.hovered,
    selected: state.selected,
    interaction: state.interaction
  };
}, {
  filter: function filter(oldState, newState, meta) {
    return meta.type !== 'cursor';
  },
  statics: {
    SeriesType: 'Area'
  }
})(Area);
//# sourceMappingURL=data:application/json;base64,