'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactState = require('react-state');

var _reactMove = require('react-move');

var _d3Shape = require('d3-shape');

var _Selectors = require('../utils/Selectors');

var _Selectors2 = _interopRequireDefault(_Selectors);

var _Utils = require('../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _interactionMethods = require('../utils/interactionMethods');

var _Path = require('../primitives/Path');

var _Path2 = _interopRequireDefault(_Path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//


var Arc = _d3Shape.arc;

var arcDefaultStyle = {
  r: 2
};

var Pie = function (_PureComponent) {
  _inherits(Pie, _PureComponent);

  function Pie() {
    _classCallCheck(this, Pie);

    var _this = _possibleConstructorReturn(this, (Pie.__proto__ || Object.getPrototypeOf(Pie)).call(this));

    _this.selectSeries = _interactionMethods.selectSeries.bind(_this);
    _this.hoverSeries = _interactionMethods.hoverSeries.bind(_this);
    _this.selectDatum = _interactionMethods.selectDatum.bind(_this);
    _this.hoverDatum = _interactionMethods.hoverDatum.bind(_this);
    return _this;
  }

  _createClass(Pie, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          series = _props.series,
          visibility = _props.visibility,
          stackData = _props.stackData,
          selected = _props.selected,
          hovered = _props.hovered,
          interaction = _props.interaction,
          primaryAxis = _props.primaryAxis;


      var status = _Utils2.default.seriesStatus(series, hovered, selected);
      var style = _Utils2.default.getStatusStyle(status, series.statusStyles);

      var radius = primaryAxis.radius,
          cutoutPercentage = primaryAxis.cutoutPercentage,
          cornerRadius = primaryAxis.cornerRadius,
          arcPadding = primaryAxis.arcPadding,
          seriesPadding = primaryAxis.seriesPadding;


      var outerRadius = radius;
      var innerRadius = radius * cutoutPercentage;
      var totalRadius = outerRadius - innerRadius;
      var seriesRadius = totalRadius / stackData.length;
      var seriesInnerRadius = innerRadius + seriesRadius * series.index;
      var seriesOuterRadius = seriesInnerRadius + seriesRadius;

      var arcPaddingRadius = outerRadius * arcPadding * 20;
      var seriesPaddingRadius = totalRadius * seriesPadding / 2.5;

      var preData = series.data.map(function (d) {
        return {
          x: d.primary,
          y: d.secondary
        };
      });

      var pie = (0, _d3Shape.pie)().sort(null).padAngle(0.01).value(function (d) {
        return d.y;
      });
      var data = pie(preData);

      return _react2.default.createElement(
        _reactMove.Animate,
        {
          'default': {
            data: data,
            visibility: 0,
            seriesPaddingRadius: 0,
            seriesInnerRadius: outerRadius,
            seriesOuterRadius: outerRadius,
            cornerRadius: cornerRadius,
            arcPaddingRadius: arcPaddingRadius
          },
          data: {
            data: data,
            visibility: visibility,
            seriesPaddingRadius: seriesPaddingRadius,
            seriesInnerRadius: seriesInnerRadius,
            seriesOuterRadius: seriesOuterRadius,
            cornerRadius: cornerRadius,
            arcPaddingRadius: arcPaddingRadius
          },
          duration: 500
        },
        function (inter) {
          var seriesInteractionProps = interaction === 'series' ? {
            onClick: function onClick() {
              return _this2.selectSeries(series);
            },
            onMouseEnter: function onMouseEnter() {
              return _this2.hoverSeries(series);
            },
            onMouseMove: function onMouseMove() {
              return _this2.hoverSeries(series);
            },
            onMouseLeave: function onMouseLeave() {
              return _this2.hoverSeries(null);
            }
          } : {};

          return _react2.default.createElement(
            'g',
            {
              transform: 'translate(' + primaryAxis.width / 2 + ', ' + primaryAxis.height / 2 + ')'
            },
            series.data.map(function (datum, i) {
              var status = _Utils2.default.datumStatus(series, datum, hovered, selected);
              var dataStyle = _Utils2.default.getStatusStyle(status, datum.statusStyles);

              var datumInteractionProps = interaction === 'element' ? {
                onClick: function onClick() {
                  return _this2.selectDatum(datum);
                },
                onMouseEnter: function onMouseEnter() {
                  return _this2.hoverDatum(datum);
                },
                onMouseMove: function onMouseMove() {
                  return _this2.hoverDatum(datum);
                },
                onMouseLeave: function onMouseLeave() {
                  return _this2.hoverDatum(null);
                }
              } : {};

              var arc = Arc().startAngle(inter.data[i].startAngle).endAngle(inter.data[i].endAngle).padAngle(inter.data[i].padAngle).padRadius(inter.arcPaddingRadius).innerRadius(inter.seriesInnerRadius + seriesPaddingRadius).outerRadius(inter.seriesOuterRadius).cornerRadius(inter.cornerRadius);

              return _react2.default.createElement(_Path2.default, _extends({
                key: i,
                d: arc(),
                style: _extends({}, arcDefaultStyle, style, style.arc, dataStyle, dataStyle.arc),
                opacity: inter.visibility
              }, seriesInteractionProps, datumInteractionProps));
            })
          );
        }
      );
    }
  }]);

  return Pie;
}(_react.PureComponent);

Pie.defaultProps = {
  showPoints: true
};
exports.default = (0, _reactState.Connect)(function () {
  var selectors = {
    primaryAxis: _Selectors2.default.primaryAxis()
  };
  return function (state, props) {
    return {
      primaryAxis: selectors.primaryAxis(state),
      hovered: state.hovered,
      selected: state.selected,
      interaction: state.interaction
    };
  };
}, {
  filter: function filter(oldState, newState, meta) {
    return meta.type !== 'cursor';
  },
  statics: {
    SeriesType: 'Pie'
  }
})(Pie);
//# sourceMappingURL=data:application/json;base64,