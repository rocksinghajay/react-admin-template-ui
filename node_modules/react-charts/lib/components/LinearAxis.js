'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.positionLeft = exports.positionBottom = exports.positionRight = exports.positionTop = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactState = require('react-state');

var _reactMove = require('react-move');

var _raf = require('raf');

var _raf2 = _interopRequireDefault(_raf);

var _Axis = require('./Axis.measure');

var _Axis2 = _interopRequireDefault(_Axis);

var _Axis3 = require('./Axis.updateScale');

var _Axis4 = _interopRequireDefault(_Axis3);

var _Path = require('../primitives/Path');

var _Path2 = _interopRequireDefault(_Path);

var _Line = require('../primitives/Line');

var _Line2 = _interopRequireDefault(_Line);

var _Text = require('../primitives/Text');

var _Text2 = _interopRequireDefault(_Text);

var _Selectors = require('../utils/Selectors');

var _Selectors2 = _interopRequireDefault(_Selectors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//


var fontSize = 10;

var positionTop = exports.positionTop = 'top';
var positionRight = exports.positionRight = 'right';
var positionBottom = exports.positionBottom = 'bottom';
var positionLeft = exports.positionLeft = 'left';

var Axis = function (_PureComponent) {
  _inherits(Axis, _PureComponent);

  // Lifecycle
  function Axis() {
    _classCallCheck(this, Axis);

    var _this = _possibleConstructorReturn(this, (Axis.__proto__ || Object.getPrototypeOf(Axis)).call(this));

    _this.rotation = 0;
    _this.measure = _Axis2.default.bind(_this);
    _this.updateScale = _Axis4.default.bind(_this);
    return _this;
  }

  _createClass(Axis, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      var oldProps = this.props;
      if (oldProps.axis !== newProps.axis && oldProps.axis) {
        this.prevAxis = oldProps.axis;
      }

      // If any of the following change,
      // we need to update the axis
      if (newProps.axes !== oldProps.axes || newProps.primary !== oldProps.primary || newProps.type !== oldProps.type || newProps.invert !== oldProps.invert || newProps.materializedData !== oldProps.materializedData || newProps.height !== oldProps.height || newProps.width !== oldProps.width || newProps.position !== oldProps.position) {
        this.updateScale(newProps);
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateScale(this.props);
      this.measure();
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(newProps) {
      if (newProps.axis !== this.props.axis) {
        return true;
      }
      return false;
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var _this2 = this;

      (0, _raf2.default)(function () {
        if (!_this2.measure()) {
          window.setTimeout(function () {
            return _this2.componentDidUpdate();
          }, 1);
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          type = _props.type,
          axis = _props.axis,
          position = _props.position,
          width = _props.width,
          height = _props.height,
          showGrid = _props.showGrid,
          tickSizeInner = _props.tickSizeInner,
          tickSizeOuter = _props.tickSizeOuter,
          display = _props.display;
      var rotation = this.rotation;

      // Render Dependencies

      if (!axis || !display) {
        return null;
      }

      var scale = axis.scale,
          max = axis.max,
          transform = axis.transform,
          vertical = axis.vertical,
          format = axis.format,
          ticks = axis.ticks,
          _axis$range = _slicedToArray(axis.range, 2),
          range0 = _axis$range[0],
          range1 = _axis$range[1],
          directionMultiplier = axis.directionMultiplier,
          tickOffset = axis.tickOffset,
          gridOffset = axis.gridOffset,
          spacing = axis.spacing;

      return _react2.default.createElement(
        _reactMove.Animate,
        {
          data: {
            width: width,
            height: height,
            max: max,
            range0: range0,
            range1: range1,
            directionMultiplier: directionMultiplier,
            tickSizeOuter: tickSizeOuter,
            tickOffset: tickOffset,
            gridOffset: gridOffset,
            spacing: spacing
          }
        },
        function (_ref) {
          var width = _ref.width,
              height = _ref.height,
              max = _ref.max,
              range0 = _ref.range0,
              range1 = _ref.range1,
              directionMultiplier = _ref.directionMultiplier,
              tickSizeOuter = _ref.tickSizeOuter,
              tickOffset = _ref.tickOffset,
              gridOffset = _ref.gridOffset,
              spacing = _ref.spacing;

          var axisPath = void 0;
          if (vertical) {
            if (position === positionLeft) {
              axisPath = '\n                M ' + -tickSizeOuter + ', ' + range0 + '\n                H 0\n                V ' + range1 + '\n                H ' + -tickSizeOuter + '\n              ';
            } else {
              axisPath = '\n                M ' + tickSizeOuter + ', ' + range0 + '\n                H 0\n                V ' + range1 + '\n                H ' + tickSizeOuter + '\n              ';
            }
          } else {
            if (position === positionBottom) {
              axisPath = '\n                M 0, ' + tickSizeOuter + '\n                V 0\n                H ' + range1 + '\n                V ' + tickSizeOuter + '\n              ';
            } else {
              axisPath = '\n                M 0, ' + -tickSizeOuter + '\n                V 0\n                H ' + range1 + '\n                V ' + -tickSizeOuter + '\n              ';
            }
          }

          return _react2.default.createElement(
            'g',
            {
              className: 'Axis',
              fill: 'black',
              fontSize: '10',
              fontFamily: 'sans-serif',
              transform: position === positionRight ? translateX(width) : position === positionBottom ? translateY(height) : undefined
            },
            _react2.default.createElement(_Path2.default, {
              className: 'domain',
              d: axisPath,
              style: {
                stroke: '#acacac',
                strokeWidth: '1',
                fill: 'transparent'
              }
            }),
            _react2.default.createElement(
              _reactMove.Transition,
              {
                data: ticks,
                getKey: function getKey(d, i) {
                  return String(d);
                },
                update: function update(d) {
                  return {
                    tick: scale(d),
                    visibility: 1,
                    measureable: 1,
                    rotation: rotation
                  };
                },
                enter: function enter(d) {
                  return {
                    tick: _this3.prevAxis.scale(d),
                    visibility: 0,
                    measureable: 1,
                    rotation: 0
                  };
                },
                leave: function leave(d) {
                  return {
                    tick: scale(d),
                    visibility: 0,
                    measureable: 0,
                    rotation: rotation
                  };
                },
                ignore: ['measureable'],
                duration: 500
              },
              function (inters) {
                var showGridLine = showGrid;

                // If ordinal and showGrid isn't explicit, hide it
                if (type === 'ordinal' && showGrid === 1) {
                  showGridLine = false;
                }

                return _react2.default.createElement(
                  'g',
                  {
                    className: 'ticks',
                    ref: function ref(el) {
                      _this3.el = el;
                    }
                  },
                  inters.map(function (inter, index) {
                    return _react2.default.createElement(
                      'g',
                      {
                        key: inter.key,
                        className: 'tick' + (inter.state.measureable ? ' -measureable' : ''),
                        transform: transform(inter.state.tick)
                      },
                      _react2.default.createElement(_Line2.default, {
                        x1: vertical ? 0 : tickOffset,
                        x2: vertical ? directionMultiplier * tickSizeInner : tickOffset,
                        y1: vertical ? tickOffset : 0,
                        y2: vertical ? tickOffset : directionMultiplier * tickSizeInner,
                        style: {
                          strokeWidth: 1
                        },
                        opacity: inter.state.visibility * 0.2
                      }),
                      showGridLine && _react2.default.createElement(_Line2.default, {
                        x1: vertical ? 0 : gridOffset,
                        x2: vertical ? max : gridOffset,
                        y1: vertical ? gridOffset : 0,
                        y2: vertical ? gridOffset : max,
                        style: {
                          strokeWidth: 1
                        },
                        opacity: inter.state.visibility * (index !== 0 && index !== inters.length - 1 && inter.data === 0 ? 0.5 : 0.2)
                      }),
                      _react2.default.createElement(
                        _Text2.default,
                        {
                          opacity: inter.state.visibility,
                          fontSize: fontSize,
                          transform: '\n                                translate(' + (vertical ? directionMultiplier * spacing : tickOffset) + ', ' + (vertical ? tickOffset : directionMultiplier * spacing) + ')\n                                rotate(' + -rotation + ')\n                              ',
                          dominantBaseline: rotation ? 'central' : position === positionBottom ? 'hanging' : position === positionTop ? 'alphabetic' : 'central',
                          textAnchor: rotation ? 'end' : position === positionRight ? 'start' : position === positionLeft ? 'end' : 'middle'
                        },
                        format(inter.data)
                      )
                    );
                  })
                );
              }
            )
          );
        }
      );
    }
  }]);

  return Axis;
}(_react.PureComponent);

Axis.defaultProps = {
  tickArguments: [],
  tickValues: null,
  tickFormat: null,
  tickSizeInner: 6,
  tickSizeOuter: 6,
  tickPadding: 3,
  maxLabelRotation: 50,
  innerPadding: 0.2,
  outerPadding: 0.1,
  showGrid: 1,
  display: true
};
exports.default = (0, _reactState.Connect)(function () {
  var selectors = {
    gridWidth: _Selectors2.default.gridWidth(),
    gridHeight: _Selectors2.default.gridHeight(),
    primaryAxis: _Selectors2.default.primaryAxis()
  };
  return function (state, props) {
    var type = props.type,
        position = props.position;


    var id = type + '_' + position;

    return {
      id: id,
      materializedData: state.materializedData,
      width: selectors.gridWidth(state),
      height: selectors.gridHeight(state),
      primaryAxis: selectors.primaryAxis(state),
      axis: state.axes && state.axes[id]
    };
  };
}, {
  filter: function filter(oldState, newState, meta) {
    return meta.type !== 'cursor';
  }
})(Axis);


function translateX(x) {
  return 'translate(' + x + ', 0)';
}

function translateY(y) {
  return 'translate(0, ' + y + ')';
}
//# sourceMappingURL=data:application/json;base64,