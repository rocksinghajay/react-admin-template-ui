'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactState = require('react-state');

var _reactMove = require('react-move');

var _Utils = require('../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _Selectors = require('../utils/Selectors');

var _Selectors2 = _interopRequireDefault(_Selectors);

var _interactionMethods = require('../utils/interactionMethods');

var _Rectangle = require('../primitives/Rectangle');

var _Rectangle2 = _interopRequireDefault(_Rectangle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//


var Bars = function (_PureComponent) {
  _inherits(Bars, _PureComponent);

  function Bars() {
    _classCallCheck(this, Bars);

    var _this = _possibleConstructorReturn(this, (Bars.__proto__ || Object.getPrototypeOf(Bars)).call(this));

    _this.selectSeries = _interactionMethods.selectSeries.bind(_this);
    _this.hoverSeries = _interactionMethods.hoverSeries.bind(_this);
    _this.selectDatum = _interactionMethods.selectDatum.bind(_this);
    _this.hoverDatum = _interactionMethods.hoverDatum.bind(_this);
    return _this;
  }

  _createClass(Bars, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          series = _props.series,
          visibility = _props.visibility,
          primaryAxis = _props.primaryAxis,
          selected = _props.selected,
          hovered = _props.hovered,
          interaction = _props.interaction;


      var status = _Utils2.default.seriesStatus(series, hovered, selected);
      var style = _Utils2.default.getStatusStyle(status, series.statusStyles);

      var barSize = primaryAxis.barSize;
      var barOffset = primaryAxis.barOffset;

      var data = series.data.map(function (d) {
        return {
          x: d.x,
          y: d.y,
          r: d.r,
          base: d.base
        };
      });

      return _react2.default.createElement(
        _reactMove.Animate,
        {
          'default': {
            data: data,
            barSize: barSize,
            barOffset: barOffset,
            visibility: 0
          },
          data: {
            data: data,
            barSize: barSize,
            barOffset: barOffset,
            visibility: visibility
          }
        },
        function (inter) {
          var seriesInteractionProps = interaction === 'series' ? {
            onClick: function onClick() {
              return _this2.selectSeries(series);
            },
            onMouseEnter: function onMouseEnter() {
              return _this2.hoverSeries(series);
            },
            onMouseMove: function onMouseMove() {
              return _this2.hoverSeries(series);
            },
            onMouseLeave: function onMouseLeave() {
              return _this2.hoverSeries(null);
            }
          } : {};
          return _react2.default.createElement(
            'g',
            { className: 'series bar' },
            series.data.map(function (datum, i) {
              var x1 = void 0,
                  y1 = void 0,
                  x2 = void 0,
                  y2 = void 0;
              if (primaryAxis.vertical) {
                x1 = inter.data[i].base;
                x2 = inter.data[i].x;
                y1 = inter.data[i].y + inter.barOffset;
                y2 = y1 + inter.barSize;
              } else {
                x1 = inter.data[i].x + inter.barOffset;
                x2 = x1 + inter.barSize;
                y1 = inter.data[i].y;
                y2 = inter.data[i].base;
              }

              var status = _Utils2.default.datumStatus(series, datum, hovered, selected);
              var dataStyle = _Utils2.default.getStatusStyle(status, datum.statusStyles);

              var datumInteractionProps = interaction === 'element' ? {
                onClick: function onClick() {
                  return _this2.selectDatum(datum);
                },
                onMouseEnter: function onMouseEnter() {
                  return _this2.hoverDatum(datum);
                },
                onMouseMove: function onMouseMove() {
                  return _this2.hoverDatum(datum);
                },
                onMouseLeave: function onMouseLeave() {
                  return _this2.hoverDatum(null);
                }
              } : {};

              return _react2.default.createElement(_Rectangle2.default, _extends({
                style: _extends({}, style, style.rectangle, dataStyle, dataStyle.rectangle),
                key: i,
                x1: isNaN(x1) ? null : x1,
                y1: isNaN(y1) ? null : y1,
                x2: isNaN(x2) ? null : x2,
                y2: isNaN(y2) ? null : y2,
                opacity: inter.visibility
              }, seriesInteractionProps, datumInteractionProps));
            })
          );
        }
      );
    }
  }]);

  return Bars;
}(_react.PureComponent);

exports.default = (0, _reactState.Connect)(function () {
  var selectors = {
    primaryAxis: _Selectors2.default.primaryAxis()
  };
  return function (state, props) {
    return {
      primaryAxis: selectors.primaryAxis(state),
      hovered: state.hovered,
      selected: state.selected,
      interaction: state.interaction
    };
  };
}, {
  filter: function filter(oldState, newState, meta) {
    return meta.type !== 'cursor';
  },
  statics: {
    SeriesType: 'Bar'
  }
})(Bars);
//# sourceMappingURL=data:application/json;base64,