'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactMove = require('react-move');

var _reactState = require('react-state');

var _Selectors = require('../utils/Selectors');

var _Selectors2 = _interopRequireDefault(_Selectors);

var _HyperResponsive = require('../utils/HyperResponsive');

var _HyperResponsive2 = _interopRequireDefault(_HyperResponsive);

var _Utils = require('../utils/Utils');

var _Utils2 = _interopRequireDefault(_Utils);

var _Rectangle = require('../primitives/Rectangle');

var _Rectangle2 = _interopRequireDefault(_Rectangle);

var _Voronoi = require('../components/Voronoi');

var _Voronoi2 = _interopRequireDefault(_Voronoi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//


var Chart = function (_PureComponent) {
  _inherits(Chart, _PureComponent);

  function Chart() {
    _classCallCheck(this, Chart);

    var _this = _possibleConstructorReturn(this, (Chart.__proto__ || Object.getPrototypeOf(Chart)).call(this));

    _this.updateDataModel = _this.updateDataModel.bind(_this);
    _this.measure = _this.measure.bind(_this);
    _this.onMouseMove = _Utils2.default.throttle(_this.onMouseMove.bind(_this), 16);
    _this.onMouseLeave = _this.onMouseLeave.bind(_this);
    _this.onMouseDown = _this.onMouseDown.bind(_this);
    _this.onMouseUp = _this.onMouseUp.bind(_this);
    return _this;
  }

  _createClass(Chart, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      this.props.dispatch(function (state) {
        return _extends({}, state, {
          interaction: _this2.props.interaction
        });
      }, {
        type: 'interaction'
      });
      this.updateDataModel(this.props);
      this.componentDidUpdate(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      // If anything related to the data model changes, update it
      if (nextProps.interaction !== this.props.interaction) {
        this.props.dispatch(function (state) {
          return _extends({}, state, {
            interaction: nextProps.interaction
          });
        }, {
          type: 'interaction'
        });
      }

      if (nextProps.data !== this.props.data || nextProps.width !== this.props.width || nextProps.height !== this.props.height || nextProps.getData !== this.props.getData || nextProps.getSeriesID !== this.props.getSeriesID || nextProps.getLabel !== this.props.getLabel || nextProps.getPrimary !== this.props.getPrimary || nextProps.getSecondary !== this.props.getSecondary || nextProps.getR !== this.props.getR) {
        this.updateDataModel(nextProps);
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      if (nextProps.style !== this.props.style || nextProps.width !== this.props.width || nextProps.height !== this.props.height || nextProps.gridX !== this.props.gridX || nextProps.gridY !== this.props.gridY || nextProps.children !== this.props.children) {
        return true;
      }
      return false;
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var _this3 = this;

      _Utils2.default.requestAnimationFrame(function () {
        return _this3.measure(prevProps);
      });
    }
  }, {
    key: 'updateDataModel',
    value: function updateDataModel(props) {
      var data = props.data;
      var getData = props.getData,
          getLabel = props.getLabel,
          getSeriesID = props.getSeriesID,
          getPrimary = props.getPrimary,
          getSecondary = props.getSecondary,
          getR = props.getR;

      // Normalize getters

      getData = _Utils2.default.normalizePathGetter(getData);
      getLabel = _Utils2.default.normalizePathGetter(getLabel);
      getSeriesID = _Utils2.default.normalizePathGetter(getSeriesID);
      getPrimary = _Utils2.default.normalizePathGetter(getPrimary);
      getSecondary = _Utils2.default.normalizePathGetter(getSecondary);
      getR = _Utils2.default.normalizePathGetter(getR);

      // First access the data, and provide it to the context
      var materializedData = data.map(function (s, seriesIndex) {
        var seriesID = getSeriesID(s, seriesIndex);
        var seriesLabel = getLabel(s, seriesIndex);
        var series = {
          row: s,
          index: seriesIndex,
          id: seriesID,
          label: seriesLabel,
          data: getData(s, seriesIndex).map(function (d, index) {
            return {
              row: s,
              seriesIndex: seriesIndex,
              seriesID: seriesID,
              seriesLabel: seriesLabel,
              index: index,
              datum: d,
              primary: getPrimary(d, index),
              secondary: getSecondary(d, index),
              r: getR(d, index)
            };
          })
        };
        return series;
      });

      // Provide the materializedData to the chart instance
      this.props.dispatch(function (state) {
        return _extends({}, state, {
          materializedData: materializedData
        });
      }, {
        type: 'materializedData'
      });
    }
  }, {
    key: 'measure',
    value: function measure(prevProps) {
      var _this4 = this;

      if (prevProps && (this.props.offset.left !== prevProps.offset.left || this.props.offset.top !== prevProps.offset.top)) {
        this.props.dispatch(function (state) {
          return _extends({}, state, {
            offset: {
              left: _this4.el.offsetLeft,
              top: _this4.el.offsetTop
            }
          });
        }, {
          type: 'offset'
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this5 = this;

      var _props = this.props,
          style = _props.style,
          width = _props.width,
          height = _props.height,
          gridX = _props.gridX,
          gridY = _props.gridY,
          children = _props.children;


      var allChildren = _react2.default.Children.toArray(children);
      var svgChildren = allChildren.filter(function (d) {
        return !d.type.isHTML;
      });
      var htmlChildren = allChildren.filter(function (d) {
        return d.type.isHTML;
      });

      return _react2.default.createElement(
        'div',
        {
          className: 'Chart',
          style: {
            height: '0',
            width: '0'
          }
        },
        _react2.default.createElement(
          _reactMove.Animate,
          {
            data: {
              gridX: gridX,
              gridY: gridY
            }
          },
          function (_ref) {
            var gridX = _ref.gridX,
                gridY = _ref.gridY;
            return _react2.default.createElement(
              'svg',
              {
                ref: function ref(el) {
                  _this5.el = el;
                },
                style: _extends({
                  width: width,
                  height: height
                }, style)
              },
              _react2.default.createElement(
                'g',
                {
                  ref: function ref(el) {
                    _this5.el = el;
                  },
                  transform: 'translate(' + (gridX || 0) + ', ' + (gridY || 0) + ')',
                  onMouseEnter: function onMouseEnter(e) {
                    e.persist();
                    _this5.onMouseMove(e);
                  },
                  onMouseMove: function onMouseMove(e) {
                    e.persist();
                    _this5.onMouseMove(e);
                  },
                  onMouseLeave: _this5.onMouseLeave,
                  onMouseDown: _this5.onMouseDown,
                  onMouseUp: _this5.onMouseUp
                },
                _react2.default.createElement(_Rectangle2.default
                // This is to ensure the cursor always has something to hit
                , { x1: -gridX,
                  x2: width - gridX,
                  y1: -gridY,
                  y2: height - gridY,
                  style: {
                    opacity: 0
                  }
                }),
                svgChildren,
                _react2.default.createElement(_Voronoi2.default, null)
              )
            );
          }
        ),
        htmlChildren
      );
    }
  }, {
    key: 'onMouseMove',
    value: function onMouseMove(e) {
      var _this6 = this;

      var clientX = e.clientX,
          clientY = e.clientY;

      this.dims = this.el.getBoundingClientRect();
      var _props2 = this.props,
          gridX = _props2.gridX,
          gridY = _props2.gridY,
          dispatch = _props2.dispatch;


      dispatch(function (state) {
        return _extends({}, state, {
          cursor: _extends({}, state.cursor, {
            active: true,
            x: clientX - _this6.dims.left - gridX,
            y: clientY - _this6.dims.top - gridY,
            dragging: state.cursor && state.cursor.down
          })
        });
      }, {
        type: 'cursor'
      });
    }
  }, {
    key: 'onMouseLeave',
    value: function onMouseLeave() {
      this.props.dispatch(function (state) {
        return _extends({}, state, {
          cursor: _extends({}, state.cursor, {
            active: false
          }),
          hovered: _extends({}, state.hovered, {
            active: false
          })
        });
      }, {
        type: 'cursor_hovered'
      });
    }
  }, {
    key: 'onMouseDown',
    value: function onMouseDown() {
      var dispatch = this.props.dispatch;


      dispatch(function (state) {
        return _extends({}, state, {
          cursor: _extends({}, state.cursor, {
            sourceX: state.cursor.x,
            sourceY: state.cursor.y,
            down: true
          })
        });
      }, {
        type: 'cursor'
      });
    }
  }, {
    key: 'onMouseUp',
    value: function onMouseUp() {
      var dispatch = this.props.dispatch;

      dispatch(function (state) {
        return _extends({}, state, {
          cursor: _extends({}, state.cursor, {
            down: false,
            dragging: false,
            released: {
              x: state.cursor.x,
              y: state.cursor.y
            }
          })
        });
      }, {
        type: 'cursor'
      });
    }
  }]);

  return Chart;
}(_react.PureComponent);

Chart.defaultProps = {
  getData: function getData(d) {
    return d;
  },
  getLabel: function getLabel(d, i) {
    return 'Series ' + (i + 1);
  },
  getSeriesID: function getSeriesID(d, i) {
    return i;
  },
  getPrimary: function getPrimary(d) {
    return Array.isArray(d) ? d[0] : d.x;
  },
  getSecondary: function getSecondary(d) {
    return Array.isArray(d) ? d[1] : d.y;
  },
  getR: function getR(d) {
    return Array.isArray(d) ? d[0] : d.r;
  },
  decorate: function decorate(d) {
    return {};
  },
  interaction: 'closestPoint'
};


var ReactChart = (0, _reactState.Connect)(function () {
  var selectors = {
    primaryAxis: _Selectors2.default.primaryAxis(),
    gridX: _Selectors2.default.gridX(),
    gridY: _Selectors2.default.gridY(),
    offset: _Selectors2.default.offset()
  };
  return function (state) {
    return {
      data: state.data,
      width: state.width,
      height: state.height,
      gridX: selectors.gridX(state),
      gridY: selectors.gridY(state),
      active: state.active,
      offset: selectors.offset(state),
      selected: state.selected
    };
  };
}, {
  filter: function filter(oldState, newState, meta) {
    return meta.type !== 'cursor';
  }
})(Chart);

exports.default = (0, _HyperResponsive2.default)((0, _reactState.Provider)(ReactChart));
//# sourceMappingURL=data:application/json;base64,