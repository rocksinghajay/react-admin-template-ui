'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.positionLeft = exports.positionBottom = exports.positionRight = exports.positionTop = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _reactState = require('react-state');

var _d3Shape = require('d3-shape');

var _Selectors = require('../utils/Selectors');

var _Selectors2 = _interopRequireDefault(_Selectors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//


// const fontSize = 10

var positionTop = exports.positionTop = 'top';
var positionRight = exports.positionRight = 'right';
var positionBottom = exports.positionBottom = 'bottom';
var positionLeft = exports.positionLeft = 'left';

var AxisPie = function (_PureComponent) {
  _inherits(AxisPie, _PureComponent);

  // Lifecycle
  function AxisPie() {
    _classCallCheck(this, AxisPie);

    // this.measure = measure.bind(this)
    var _this = _possibleConstructorReturn(this, (AxisPie.__proto__ || Object.getPrototypeOf(AxisPie)).call(this));

    _this.updateScale = _this.updateScale.bind(_this);
    return _this;
  }

  _createClass(AxisPie, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      var oldProps = this.props;

      // If any of the following change,
      // we need to update the axis
      if (newProps.materializedData !== oldProps.materializedData || newProps.height !== oldProps.height || newProps.width !== oldProps.width) {
        this.updateScale(newProps);
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateScale(this.props);
      // this.measure()
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(newProps) {
      if (newProps.axis !== this.props.axis) {
        return true;
      }
      return false;
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      // RAF(() => {
      //   if (!this.measure()) {
      //     window.setTimeout(() => this.componentDidUpdate(), 1)
      //   }
      // })
    }
  }, {
    key: 'updateScale',
    value: function updateScale(props) {
      var type = props.type,
          id = props.id,
          materializedData = props.materializedData,
          cutoutPercentage = props.cutoutPercentage,
          width = props.width,
          height = props.height,
          dispatch = props.dispatch,
          outerPadding = props.outerPadding,
          cornerRadius = props.cornerRadius,
          arcPadding = props.arcPadding,
          seriesPadding = props.seriesPadding;
      // We need the data to proceed

      if (!materializedData) {
        return;
      }

      var midX = width / 2;
      var midY = height / 2;
      var radius = Math.min(midX, midY) - outerPadding;

      var outerRadius = radius;
      var innerRadius = radius * cutoutPercentage;
      var totalRadius = outerRadius - innerRadius;
      var seriesRadius = totalRadius / materializedData.length;
      var arcPaddingRadius = outerRadius * arcPadding * 20;
      var seriesPaddingRadius = totalRadius * seriesPadding / 2.5;
      var padAngle = 0.01;

      var data = materializedData.map(function (series) {
        var seriesInnerRadius = innerRadius + seriesRadius * series.index;
        var seriesOuterRadius = seriesRadius + seriesInnerRadius;
        var preData = series.data.map(function (d) {
          return {
            x: d.primary,
            y: d.secondary
          };
        });
        var pie = (0, _d3Shape.pie)().sort(null).padAngle(padAngle).value(function (d) {
          return d.y;
        });
        var pieData = pie(preData);
        return pieData.map(function (d) {
          var arcData = {
            startAngle: d.startAngle,
            endAngle: d.endAngle,
            padAngle: d.padAngle,
            padRadius: arcPaddingRadius,
            innerRadius: seriesInnerRadius + seriesPaddingRadius,
            outerRadius: seriesOuterRadius,
            cornerRadius: cornerRadius
          };
          // Calculate the arc for the centroid
          var arc = (0, _d3Shape.arc)().startAngle(arcData.startAngle).endAngle(arcData.endAngle).padAngle(arcData.padAngle).padRadius(arcPaddingRadius).innerRadius(seriesInnerRadius + seriesPaddingRadius).outerRadius(seriesOuterRadius).cornerRadius(cornerRadius);
          var centroid = arc.centroid();
          return {
            x: centroid[0] + midX,
            y: centroid[1] + midY
          };
        });
      });

      var primaryScale = function primaryScale(d) {
        return data[d.seriesIndex] ? data[d.seriesIndex][d.index] ? data[d.seriesIndex][d.index] : 0 : 0;
      };
      var secondaryScale = function secondaryScale(d) {
        return data[d.seriesIndex] ? data[d.seriesIndex][d.index] ? data[d.seriesIndex][d.index] : 0 : 0;
      };
      primaryScale.range = function () {
        return [0, width];
      };
      secondaryScale.range = function () {
        return [height, 0];
      };

      var primaryAxis = {
        id: id,
        scale: primaryScale,
        cutoutPercentage: cutoutPercentage,
        type: type,
        primary: true,
        format: function format(d) {
          return d;
        },
        width: width,
        height: height,
        radius: radius,
        cornerRadius: cornerRadius,
        arcPadding: arcPadding,
        seriesPadding: seriesPadding,
        outerRadius: outerRadius,
        innerRadius: innerRadius,
        totalRadius: totalRadius,
        seriesRadius: seriesRadius,
        arcPaddingRadius: arcPaddingRadius,
        seriesPaddingRadius: seriesPaddingRadius,
        padAngle: padAngle
      };

      var secondaryAxis = {
        id: id,
        scale: secondaryScale,
        format: function format(d) {
          return d;
        },
        type: type
      };

      dispatch(function (state) {
        return _extends({}, state, {
          axes: {
            pie_primary: primaryAxis,
            pie_secondary: secondaryAxis
          }
        });
      }, {
        type: 'axisUpdateScale'
      });
    }
  }, {
    key: 'render',
    value: function render() {
      // TODO: This is where permanent labels and lines will be drawn
      return null;
    }
  }]);

  return AxisPie;
}(_react.PureComponent);

AxisPie.defaultProps = {
  tickArguments: [],
  tickValues: null,
  tickFormat: null,
  tickSizeInner: 6,
  tickSizeOuter: 6,
  tickPadding: 3,
  cutoutPercentage: 0.5,
  outerPadding: 10,
  cornerRadius: 1,
  arcPadding: 0.2,
  seriesPadding: 0.2
};
exports.default = (0, _reactState.Connect)(function () {
  var selectors = {
    gridWidth: _Selectors2.default.gridWidth(),
    gridHeight: _Selectors2.default.gridHeight()
  };
  return function (state, props) {
    return {
      materializedData: state.materializedData,
      width: selectors.gridWidth(state),
      height: selectors.gridHeight(state)
    };
  };
}, {
  filter: function filter(oldState, newState, meta) {
    return meta.type !== 'cursor';
  }
})(AxisPie);
//# sourceMappingURL=data:application/json;base64,