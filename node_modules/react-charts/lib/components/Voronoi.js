'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactState = require('react-state');

var _d3Voronoi = require('d3-voronoi');

var _d3Shape = require('d3-shape');

var _Path = require('../primitives/Path');

var _Path2 = _interopRequireDefault(_Path);

var _Selectors = require('../utils/Selectors');

var _Selectors2 = _interopRequireDefault(_Selectors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
//


var noop = function noop() {
  return null;
};

var modeClosestSeries = 'closestSeries';
var modeClosestPoint = 'closestPoint';
var modeAxis = 'axis';

var Interaction = function (_PureComponent) {
  _inherits(Interaction, _PureComponent);

  function Interaction() {
    _classCallCheck(this, Interaction);

    var _this = _possibleConstructorReturn(this, (Interaction.__proto__ || Object.getPrototypeOf(Interaction)).call(this));

    _this.onHover = _this.onHover.bind(_this);
    _this.onClick = _this.onClick.bind(_this);
    return _this;
  }

  _createClass(Interaction, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          interaction = _props.interaction,
          stackData = _props.stackData,
          primaryAxis = _props.primaryAxis,
          secondaryAxis = _props.secondaryAxis;

      // Don't render until we have all dependencies

      if (!stackData || !primaryAxis || !secondaryAxis) {
        return null;
      }

      var xScale = primaryAxis.vertical ? secondaryAxis : primaryAxis;
      var yScale = primaryAxis.vertical ? primaryAxis : secondaryAxis;

      var extent = [[xScale.scale.range()[0], yScale.scale.range()[1]], [xScale.scale.range()[1], yScale.scale.range()[0]]];
      var lineFn = (0, _d3Shape.line)();

      var polygons = void 0;

      if (interaction === modeClosestSeries) {
        // Closest Point Voronoi
        var voronoiData = stackData.reduce(function (prev, now) {
          return prev.concat(now.data);
        }, []).map(function (d) {
          return {
            x: d.focus.x,
            y: d.focus.y,
            series: stackData[d.seriesIndex],
            datums: null,
            single: false
          };
        }).filter(function (d) {
          return typeof d.x === 'number' && typeof d.y === 'number';
        });
        var vor = (0, _d3Voronoi.voronoi)().x(function (d) {
          return d.x;
        }).y(function (d) {
          return d.y;
        }).extent(extent)(voronoiData);
        polygons = vor.polygons();
      } else if (interaction === modeClosestPoint) {
        // Closest Point Voronoi
        var _voronoiData = stackData.reduce(function (prev, now) {
          return prev.concat(now.data);
        }, []).map(function (d) {
          return {
            x: d.focus.x,
            y: d.focus.y,
            series: null,
            datums: [d],
            single: true
          };
        }).filter(function (d) {
          return typeof d.x === 'number' && typeof d.y === 'number';
        });
        var _vor = (0, _d3Voronoi.voronoi)().x(function (d) {
          return d.x;
        }).y(function (d) {
          return d.y;
        }).extent(extent)(_voronoiData);
        polygons = _vor.polygons();
      } else if (interaction === modeAxis) {
        // Axis Voronoi
        // Group all data points based on primaryAxis
        var allDatums = stackData.reduce(function (prev, now) {
          return prev.concat(now.data);
        }, []);
        var datumsByAxis = {};
        allDatums.forEach(function (d) {
          var key = String(d.primary);
          datumsByAxis[key] = datumsByAxis[key] || {
            x: d.focus.x,
            y: d.focus.y,
            series: null, // AxisAxis can't be the series, so don't send it
            datums: [],
            single: false
          };
          datumsByAxis[key].datums.push(d);
        });
        var _voronoiData2 = Object.keys(datumsByAxis).map(function (d) {
          return datumsByAxis[d];
        });
        var _vor2 = (0, _d3Voronoi.voronoi)().x(function (d) {
          return primaryAxis.vertical ? 0 : d.x;
        }).y(function (d) {
          return primaryAxis.vertical ? d.y : 0;
        }).extent(extent)(_voronoiData2);
        polygons = _vor2.polygons();
      } else {
        return null;
      }

      // Series and Element interactions modes are handled by the
      // elements themselves, so do nothing for them here.

      return _react2.default.createElement(
        'g',
        { className: 'Interaction', onMouseLeave: function onMouseLeave() {
            return _this2.onHover(null, null);
          } },
        !!polygons && polygons.map(function (points, i) {
          // Only draw the voronoi if we need it
          var path = lineFn(points);
          return _react2.default.createElement(_Path2.default, {
            key: i,
            d: path,
            className: 'action-voronoi',
            onMouseEnter: function onMouseEnter(e) {
              return _this2.onHover(points.data.series, points.data.datums);
            },
            onClick: function onClick(e) {
              return _this2.onClick(points.data.series, points.data.datums);
            },
            style: {
              fill: 'rgba(0,0,0,.2)',
              strokeWidth: 5,
              stroke: 'rgba(255,255,255,.5)',
              opacity: 0
            }
          });
        })
      );
    }
  }, {
    key: 'onHover',
    value: function onHover(series, datums) {
      // activate the hover with any series or datums
      if (series || datums) {
        return this.props.dispatch(function (state) {
          return _extends({}, state, {
            hovered: {
              active: true,
              series: series,
              datums: datums
            }
          });
        }, {
          type: 'hoveredVoronoi'
        });
      }
      // If we just left the area, deactive the hover
      return this.props.dispatch(function (state) {
        return _extends({}, state, {
          hovered: _extends({}, state.hovered, {
            active: false
          })
        });
      }, {
        type: 'hoveredVoronoi'
      });
    }
  }, {
    key: 'onClick',
    value: function onClick(series, datums) {
      if (series || datums) {
        return this.props.dispatch(function (state) {
          return _extends({}, state, {
            selected: {
              active: true,
              series: series,
              datums: datums
            }
          });
        }, {
          type: 'selectedVoronoi'
        });
      }
    }
  }]);

  return Interaction;
}(_react.PureComponent);

Interaction.defaultProps = {
  onHover: noop,
  onActivate: noop
};
exports.default = (0, _reactState.Connect)(function () {
  var selectors = {
    primaryAxis: _Selectors2.default.primaryAxis(),
    secondaryAxis: _Selectors2.default.secondaryAxis()
  };
  return function (state) {
    return {
      stackData: state.stackData,
      primaryAxis: selectors.primaryAxis(state),
      secondaryAxis: selectors.secondaryAxis(state),
      interaction: state.interaction
    };
  };
}, {
  filter: function filter(oldState, newState, meta) {
    return meta.type !== 'cursor';
  }
})(Interaction);
//# sourceMappingURL=data:application/json;base64,