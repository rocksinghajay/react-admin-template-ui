'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = Connect;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var alwaysUpdate = function alwaysUpdate(d) {
  return d;
};
var neverUpdate = function neverUpdate() {
  return {};
};

var defaultConfig = {
  statics: {}
};

function Connect(subscribe) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultConfig;

  // If subscribe is true, always update,
  // If Subscribe is truthy, expect a function
  // Otherwise, never update the component, only provide dispatch
  subscribe = subscribe === true ? alwaysUpdate : subscribe || neverUpdate;
  var statics = config.statics;


  return function (ComponentToWrap) {
    var Connected = function (_PureComponent) {
      _inherits(Connected, _PureComponent);

      // let’s define what’s needed from the `context`
      function Connected() {
        _classCallCheck(this, Connected);

        // Bind non-react methods
        var _this = _possibleConstructorReturn(this, (Connected.__proto__ || Object.getPrototypeOf(Connected)).call(this));

        _this.onNotify = _this.onNotify.bind(_this);

        // Find out if subscribe returns a function
        var subscribePreview = void 0;
        try {
          subscribePreview = subscribe();
        } catch (e) {}

        if (typeof subscribePreview === 'function') {
          // If it does, make a new instance of it for this component
          _this.subscribe = subscribe();
        } else {
          // Otherwise just use it as is
          _this.subscribe = subscribe;
        }
        return _this;
      }

      _createClass(Connected, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          // Resolve props on mount
          this.resolveProps();
        }
      }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
          // Subscribe to the store for updates
          this.unsubscribe = this.context.reactState.subscribe(this.onNotify.bind(this), config);
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          if (this.resolveProps(nextProps)) {
            this.forceUpdate();
          }
        }
      }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate() {
          return false;
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          this.unsubscribe();
        }
      }, {
        key: 'onNotify',
        value: function onNotify() {
          if (this.resolveProps()) {
            this.forceUpdate();
          }
        }
      }, {
        key: 'resolveProps',
        value: function resolveProps() {
          var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

          var children = props.children,
              rest = _objectWithoutProperties(props, ['children']);

          var reactState = this.context.reactState;


          var mappedProps = this.subscribe(reactState.getStore(), rest);

          var newProps = _extends({}, rest, mappedProps);

          var needsUpdate = !this.resolvedProps;

          if (this.resolvedProps) {
            for (var prop in newProps) {
              if (newProps.hasOwnProperty(prop)) {
                if (this.resolvedProps[prop] !== newProps[prop]) {
                  needsUpdate = true;
                  break;
                }
                if (needsUpdate) break;
              }
              if (needsUpdate) break;
            }
          }

          this.resolvedProps = newProps;

          return needsUpdate;
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(ComponentToWrap, _extends({}, this.props, this.resolvedProps, {
            dispatch: this.context.reactState.dispatch
          }));
        }
      }]);

      return Connected;
    }(_react.PureComponent);

    Connected.displayName = 'Connect(' + (ComponentToWrap.displayName || ComponentToWrap.name) + ')';
    Connected.contextTypes = {
      reactState: _propTypes2.default.object.isRequired
    };


    for (var prop in statics) {
      if (statics.hasOwnProperty(prop)) {
        Connected[prop] = statics[prop];
      }
    }
    return Connected;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,